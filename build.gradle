plugins {
	id "com.google.osdetector" version "1.4.0"
	id "de.undercouch.download" version "3.2.0"
}

import de.undercouch.gradle.tasks.download.Download

// To download and copy cef natives for different OS, i.e.:
// ./gradlew copyCef -Pos=linux

ext.targetos = hasProperty('os') ? os : osdetector.os
ext.fragmentDir = "com.make.cef.${targetos}.${osdetector.arch}/${targetos}-${osdetector.arch}"
ext.cefDir = "../cefrust/cef_${targetos}"

println targetos

def cefFile() {
	def variant = (buildType == 'release') ? 'client' : 'minimal'
	def osname = (targetos == 'osx') ? 'macosx' : targetos
	"cef_binary_${cefVersion}_${osname}64_${variant}"
}

task getCef(type: Download) {
	src "http://opensource.spotify.com/cefbuilds/${cefFile()}.tar.bz2"
    dest buildDir
    onlyIfNewer true
}

task unzip(dependsOn: getCef, type: Copy) {
    from tarTree("${buildDir}/${cefFile()}.tar.bz2")
    into buildDir
}

task getCefAndUnzip(dependsOn: unzip, type: Copy) {
    from "${buildDir}/${cefFile()}"
    into cefDir
}

task buildCefRustExe(dependsOn: getCefAndUnzip, type: Exec) {
	workingDir '../cefrust'
	commandLine 'cargo', 'build', "--${buildType}"
}

task buildCefRustLib(dependsOn: getCefAndUnzip, type: Exec) {
	workingDir '../cefrust/cefrustlib'
	commandLine 'cargo', 'build', "--${buildType}"
}

task buildCefRust(dependsOn: [buildCefRustExe, buildCefRustLib]) {

}

task copyCefRust(type: Copy) {
    from("../cefrust/cefrustlib/target/${buildType}") {
        include '*cefrustlib*'
    }
    from("../cefrust/target/${buildType}") {
        include 'cefrust_subp*'
    }
    into fragmentDir
}

task copyCef(dependsOn: getCefAndUnzip, type: Copy) {
    from("${cefDir}/${buildType.capitalize()}") {
        exclude '*.lib'
        include 'locales/**'
        include '*.pak'
        include '*.dll'
        include '*.so'
        include '*.bin'
        include '*.dat'
    }
    into fragmentDir
}

task stripSymbols(type: Exec) {
	if ('linux' == osdetector.os && 'linux' == targetos) {
		copyCef.finalizedBy stripSymbols
	}
	workingDir fragmentDir
	commandLine 'strip', 'libcef.so'
}

task copyNatives(dependsOn: [copyCef, copyCefRust]) {
	buildCefRust.finalizedBy copyNatives
}

task writeProps(dependsOn: copyNatives, type: WriteProperties) {
    copyNatives.finalizedBy writeProps
    def props = new HashMap()
    props.put('cefVersion', cefVersion)
    doFirst {
        def parent = file(fragmentDir).toPath()
        def output = fileTree(dir: fragmentDir, exclude: 'files.properties').files
        output.collect { it.toPath() }.each { props.put(it.fileName.toString(), it.subpath(parent.nameCount-1, it.nameCount).toString().replace("\\", "/")) }
        properties props
    }
    //properties props
    outputFile new File(copyCef.destinationDir, 'files.properties')
}

task buildSampleOsgi(type: GradleBuild) {
    dir = 'com.make.cef.sample.osgi'
    tasks = ['build', 'cleanOsgiRuntime', 'createOsgiRuntime']
}

task buildSampleE4(type: Exec) {
    if ('windows' == osdetector.os) {
        commandLine 'cmd', '/C', 'mvnw -B verify -P sample', (gradle.startParameter.isOffline() ? '-o' : '-U')
    } else {
        executable './mvnw'
        args '-B', 'verify', '-P', 'sample', (gradle.startParameter.isOffline() ? '-o' : '-U')
    }
}

task buildP2Repo(type: Exec) {
    if ('windows' == osdetector.os) {
        commandLine 'cmd', '/C', 'mvnw -B verify -P p2', (gradle.startParameter.isOffline() ? '-o' : '-U')
    } else {
        executable './mvnw'
        args '-B', 'verify', '-P', 'p2', (gradle.startParameter.isOffline() ? '-o' : '-U')
    }
}
