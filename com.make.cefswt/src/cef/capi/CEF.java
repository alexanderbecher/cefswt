package cef.capi;
// Generated by ffi_gen. Please do not change this file by hand.
import jnr.ffi.*;
import jnr.ffi.util.*;
import jnr.ffi.mapper.*;
import java.lang.annotation.*;

public class CEF {
    public static CEFInterface INSTANCE = CEFInterface.InstanceCreator.createInstance();
    private static jnr.ffi.Runtime RUNTIME;
    
    /*interface NativeEnum {
        public int toNativeInt();
    }*/
    /*
    static Pointer bytesToPointer(byte[] b) {
        Pointer p = Memory.allocate(RUNTIME, b.length);
        p.write(0, b, 0, b.length);
        return p;
    }
    */
    
    public static int K_NULL_CURSOR_HANDLE = 0;
    
    public static int K_NULL_WINDOW_HANDLE = 0;
    
    /**
     * (Not documented)
     */
    public static final class XEvent extends Union {
        // hidden structure
        public XEvent() {
          super(RUNTIME);
        }
        public XEvent(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     */
    public static final class XDisplay extends Struct {
        // hidden structure
        public XDisplay() {
          super(RUNTIME);
        }
        public XDisplay(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * @method getXdisplay()
     * @return [XDisplay] 
     * @scope class
     */
    public static XDisplay getXdisplay() {
        return INSTANCE.getXdisplay();
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :argc ::
     *   (Integer) 
     * :argv ::
     *   (FFI::Pointer(**CharS)) 
     */
    public static final class MainArgs extends Struct {
        public int argc;
        public Pointer argv;
        public MainArgs() {
          super(RUNTIME);
        }
        public MainArgs(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :x ::
     *   (Integer) 
     * :y ::
     *   (Integer) 
     * :width ::
     *   (Integer) 
     * :height ::
     *   (Integer) 
     * :parentWindow ::
     *   (Integer) 
     * :windowlessRenderingEnabled ::
     *   (Integer) Set to true (1) to create the browser using windowless (off-screen)
     *   rendering. No window will be created for the browser and all rendering will
     *   occur via the CefRenderHandler interface. The |parent_window| value will be
     *   used to identify monitor info and to act as the parent window for dialogs,
     *   context menus, etc. If |parent_window| is not provided then the main screen
     *   monitor will be used and some functionality that requires a parent window
     *   may not function correctly. In order to create windowless browsers the
     *   CefSettings.windowless_rendering_enabled value must be set to true.
     * :transparentPaintingEnabled ::
     *   (Integer) Set to true (1) to enable transparent painting in combination with
     *   windowless rendering. When this value is true a transparent background
     *   color will be used (RGBA=0x00000000). When this value is false the
     *   background will be white and opaque.
     * :window ::
     *   (Integer) 
     */
    public static final class WindowInfo extends Struct {
        public int x;
        public int y;
        public int width;
        public int height;
        public NativeLong parent_window;
        public int windowless_rendering_enabled;
        public int transparent_painting_enabled;
        public NativeLong window;
        public WindowInfo() {
          super(RUNTIME);
        }
        public WindowInfo(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:LogSeverity).</em>
     * 
     * === Options:
     * LOGSEVERITY_DEFAULT ::
     *   Default logging (currently INFO logging).
     * LOGSEVERITY_VERBOSE ::
     *   Verbose logging.
     * LOGSEVERITY_INFO ::
     *   INFO logging.
     * LOGSEVERITY_WARNING ::
     *   WARNING logging.
     * LOGSEVERITY_ERROR ::
     *   ERROR logging.
     * LOGSEVERITY_DISABLE ::
     *   Completely disable logging.
     * 
     * @method _enum_LogSeverity_
     * @return [Symbol]
     * @scope class
     */
    public enum LogSeverity implements EnumMapper.IntegerEnum {
        LOGSEVERITY_DEFAULT(Long.valueOf(0L).intValue()),
        LOGSEVERITY_VERBOSE(Long.valueOf(1L).intValue()),
        LOGSEVERITY_INFO(Long.valueOf(2L).intValue()),
        LOGSEVERITY_WARNING(Long.valueOf(3L).intValue()),
        LOGSEVERITY_ERROR(Long.valueOf(4L).intValue()),
        LOGSEVERITY_DISABLE(Long.valueOf(99L).intValue())
        ;
        
        private int nativeInt;
        
        private LogSeverity(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:State).</em>
     * 
     * === Options:
     * DEFAULT ::
     *   Use the default state for the setting.
     * ENABLED ::
     *   Enable or allow the setting.
     * DISABLED ::
     *   Disable or disallow the setting.
     * 
     * @method _enum_State_
     * @return [Symbol]
     * @scope class
     */
    public enum State implements EnumMapper.IntegerEnum {
        DEFAULT(Long.valueOf(0L).intValue()),
        ENABLED(Long.valueOf(1L).intValue()),
        DISABLED(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private State(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :size ::
     *   (Integer) Size of this structure.
     * :singleProcess ::
     *   (Integer) Set to true (1) to use a single process for the browser and renderer. This
     *   run mode is not officially supported by Chromium and is less stable than
     *   the multi-process default. Also configurable using the "single-process"
     *   command-line switch.
     * :noSandbox ::
     *   (Integer) Set to true (1) to disable the sandbox for sub-processes. See
     *   cef_sandbox_win.h for requirements to enable the sandbox on Windows. Also
     *   configurable using the "no-sandbox" command-line switch.
     * :browserSubprocessPath ::
     *   (unknown) The path to a separate executable that will be launched for sub-processes.
     *   By default the browser process executable is used. See the comments on
     *   CefExecuteProcess() for details. Also configurable using the
     *   "browser-subprocess-path" command-line switch.
     * :multiThreadedMessageLoop ::
     *   (Integer) Set to true (1) to have the browser process message loop run in a separate
     *   thread. If false (0) than the CefDoMessageLoopWork() function must be
     *   called from your application message loop. This option is only supported on
     *   Windows.
     * :windowlessRenderingEnabled ::
     *   (Integer) Set to true (1) to enable windowless (off-screen) rendering support. Do not
     *   enable this value if the application does not use windowless rendering as
     *   it may reduce rendering performance on some systems.
     * :commandLineArgsDisabled ::
     *   (Integer) Set to true (1) to disable configuration of browser process features using
     *   standard CEF and Chromium command-line arguments. Configuration can still
     *   be specified using CEF data structures or via the
     *   CefApp::OnBeforeCommandLineProcessing() method.
     * :cachePath ::
     *   (unknown) The location where cache data will be stored on disk. If empty then
     *   browsers will be created in "incognito mode" where in-memory caches are
     *   used for storage and no data is persisted to disk. HTML5 databases such as
     *   localStorage will only persist across sessions if a cache path is
     *   specified. Can be overridden for individual CefRequestContext instances via
     *   the CefRequestContextSettings.cache_path value.
     * :userDataPath ::
     *   (unknown) The location where user data such as spell checking dictionary files will
     *   be stored on disk. If empty then the default platform-specific user data
     *   directory will be used ("~/.cef_user_data" directory on Linux,
     *   "~/Library/Application Support/CEF/User Data" directory on Mac OS X,
     *   "Local Settings\Application Data\CEF\User Data" directory under the user
     *   profile directory on Windows).
     * :persistSessionCookies ::
     *   (Integer) To persist session cookies (cookies without an expiry date or validity
     *   interval) by default when using the global cookie manager set this value to
     *   true (1). Session cookies are generally intended to be transient and most
     *   Web browsers do not persist them. A |cache_path| value must also be
     *   specified to enable this feature. Also configurable using the
     *   "persist-session-cookies" command-line switch. Can be overridden for
     *   individual CefRequestContext instances via the
     *   CefRequestContextSettings.persist_session_cookies value.
     * :persistUserPreferences ::
     *   (Integer) To persist user preferences as a JSON file in the cache path directory set
     *   this value to true (1). A |cache_path| value must also be specified
     *   to enable this feature. Also configurable using the
     *   "persist-user-preferences" command-line switch. Can be overridden for
     *   individual CefRequestContext instances via the
     *   CefRequestContextSettings.persist_user_preferences value.
     * :userAgent ::
     *   (unknown) Value that will be returned as the User-Agent HTTP header. If empty the
     *   default User-Agent string will be used. Also configurable using the
     *   "user-agent" command-line switch.
     * :productVersion ::
     *   (unknown) Value that will be inserted as the product portion of the default
     *   User-Agent string. If empty the Chromium product version will be used. If
     *   |userAgent| is specified this value will be ignored. Also configurable
     *   using the "product-version" command-line switch.
     * :locale ::
     *   (unknown) The locale string that will be passed to WebKit. If empty the default
     *   locale of "en-US" will be used. This value is ignored on Linux where locale
     *   is determined using environment variable parsing with the precedence order:
     *   LANGUAGE, LC_ALL, LC_MESSAGES and LANG. Also configurable using the "lang"
     *   command-line switch.
     * :logFile ::
     *   (unknown) The directory and file name to use for the debug log. If empty a default
     *   log file name and location will be used. On Windows and Linux a "debug.log"
     *   file will be written in the main executable directory. On Mac OS X a
     *   "~/Library/Logs/<app name>_debug.log" file will be written where <app name>
     *   is the name of the main app executable. Also configurable using the
     *   "log-file" command-line switch.
     * :logSeverity ::
     *   (Symbol from _enum_LogSeverity_) The log severity. Only messages of this severity level or higher will be
     *   logged. Also configurable using the "log-severity" command-line switch with
     *   a value of "verbose", "info", "warning", "error", "error-report" or
     *   "disable".
     * :javascriptFlags ::
     *   (unknown) Custom flags that will be used when initializing the V8 JavaScript engine.
     *   The consequences of using custom flags may not be well tested. Also
     *   configurable using the "js-flags" command-line switch.
     * :resourcesDirPath ::
     *   (unknown) The fully qualified path for the resources directory. If this value is
     *   empty the cef.pak and/or devtools_resources.pak files must be located in
     *   the module directory on Windows/Linux or the app bundle Resources directory
     *   on Mac OS X. Also configurable using the "resources-dir-path" command-line
     *   switch.
     * :localesDirPath ::
     *   (unknown) The fully qualified path for the locales directory. If this value is empty
     *   the locales directory must be located in the module directory. This value
     *   is ignored on Mac OS X where pack files are always loaded from the app
     *   bundle Resources directory. Also configurable using the "locales-dir-path"
     *   command-line switch.
     * :packLoadingDisabled ::
     *   (Integer) Set to true (1) to disable loading of pack files for resources and locales.
     *   A resource bundle handler must be provided for the browser and render
     *   processes via CefApp::GetResourceBundleHandler() if loading of pack files
     *   is disabled. Also configurable using the "disable-pack-loading" command-
     *   line switch.
     * :remoteDebuggingPort ::
     *   (Integer) Set to a value between 1024 and 65535 to enable remote debugging on the
     *   specified port. For example, if 8080 is specified the remote debugging URL
     *   will be http://localhost:8080. CEF can be remotely debugged from any CEF or
     *   Chrome browser window. Also configurable using the "remote-debugging-port"
     *   command-line switch.
     * :uncaughtExceptionStackSize ::
     *   (Integer) The number of stack trace frames to capture for uncaught exceptions.
     *   Specify a positive value to enable the CefRenderProcessHandler::
     *   OnUncaughtException() callback. Specify 0 (default value) and
     *   OnUncaughtException() will not be called. Also configurable using the
     *   "uncaught-exception-stack-size" command-line switch.
     * :contextSafetyImplementation ::
     *   (Integer) By default CEF V8 references will be invalidated (the IsValid() method will
     *   return false) after the owning context has been released. This reduces the
     *   need for external record keeping and avoids crashes due to the use of V8
     *   references after the associated context has been released.
     *   
     *   CEF currently offers two context safety implementations with different
     *   performance characteristics. The default implementation (value of 0) uses a
     *   map of hash values and should provide better performance in situations with
     *   a small number contexts. The alternate implementation (value of 1) uses a
     *   hidden value attached to each context and should provide better performance
     *   in situations with a large number of contexts.
     *   
     *   If you need better performance in the creation of V8 references and you
     *   plan to manually track context lifespan you can disable context safety by
     *   specifying a value of -1.
     *   
     *   Also configurable using the "context-safety-implementation" command-line
     *   switch.
     * :ignoreCertificateErrors ::
     *   (Integer) Set to true (1) to ignore errors related to invalid SSL certificates.
     *   Enabling this setting can lead to potential security vulnerabilities like
     *   "man in the middle" attacks. Applications that load content from the
     *   internet should not enable this setting. Also configurable using the
     *   "ignore-certificate-errors" command-line switch. Can be overridden for
     *   individual CefRequestContext instances via the
     *   CefRequestContextSettings.ignore_certificate_errors value.
     * :backgroundColor ::
     *   (Integer) Opaque background color used for accelerated content. By default the
     *   background color will be white. Only the RGB compontents of the specified
     *   value will be used. The alpha component must greater than 0 to enable use
     *   of the background color but will be otherwise ignored.
     * :acceptLanguageList ::
     *   (unknown) Comma delimited ordered list of language codes without any whitespace that
     *   will be used in the "Accept-Language" HTTP header. May be overridden on a
     *   per-browser basis using the CefBrowserSettings.accept_language_list value.
     *   If both values are empty then "en-US,en" will be used. Can be overridden
     *   for individual CefRequestContext instances via the
     *   CefRequestContextSettings.accept_language_list value.
     */
    public static final class Settings extends Struct {
        public NativeLong size;
        public int single_process;
        public int no_sandbox;
        public byte browser_subprocess_path;
        public int multi_threaded_message_loop;
        public int windowless_rendering_enabled;
        public int command_line_args_disabled;
        public byte cache_path;
        public byte user_data_path;
        public int persist_session_cookies;
        public int persist_user_preferences;
        public byte user_agent;
        public byte product_version;
        public byte locale;
        public byte log_file;
        public LogSeverity log_severity;
        public byte javascript_flags;
        public byte resources_dir_path;
        public byte locales_dir_path;
        public int pack_loading_disabled;
        public int remote_debugging_port;
        public int uncaught_exception_stack_size;
        public int context_safety_implementation;
        public int ignore_certificate_errors;
        public int background_color;
        public byte accept_language_list;
        public Settings() {
          super(RUNTIME);
        }
        public Settings(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :size ::
     *   (Integer) Size of this structure.
     * :cachePath ::
     *   (unknown) The location where cache data will be stored on disk. If empty then
     *   browsers will be created in "incognito mode" where in-memory caches are
     *   used for storage and no data is persisted to disk. HTML5 databases such as
     *   localStorage will only persist across sessions if a cache path is
     *   specified. To share the global browser cache and related configuration set
     *   this value to match the CefSettings.cache_path value.
     * :persistSessionCookies ::
     *   (Integer) To persist session cookies (cookies without an expiry date or validity
     *   interval) by default when using the global cookie manager set this value to
     *   true (1). Session cookies are generally intended to be transient and most
     *   Web browsers do not persist them. Can be set globally using the
     *   CefSettings.persist_session_cookies value. This value will be ignored if
     *   |cache_path| is empty or if it matches the CefSettings.cache_path value.
     * :persistUserPreferences ::
     *   (Integer) To persist user preferences as a JSON file in the cache path directory set
     *   this value to true (1). Can be set globally using the
     *   CefSettings.persist_user_preferences value. This value will be ignored if
     *   |cache_path| is empty or if it matches the CefSettings.cache_path value.
     * :ignoreCertificateErrors ::
     *   (Integer) Set to true (1) to ignore errors related to invalid SSL certificates.
     *   Enabling this setting can lead to potential security vulnerabilities like
     *   "man in the middle" attacks. Applications that load content from the
     *   internet should not enable this setting. Can be set globally using the
     *   CefSettings.ignore_certificate_errors value. This value will be ignored if
     *   |cache_path| matches the CefSettings.cache_path value.
     * :acceptLanguageList ::
     *   (unknown) Comma delimited ordered list of language codes without any whitespace that
     *   will be used in the "Accept-Language" HTTP header. Can be set globally
     *   using the CefSettings.accept_language_list value or overridden on a per-
     *   browser basis using the CefBrowserSettings.accept_language_list value. If
     *   all values are empty then "en-US,en" will be used. This value will be
     *   ignored if |cache_path| matches the CefSettings.cache_path value.
     */
    public static final class RequestContextSettings extends Struct {
        public NativeLong size;
        public byte cache_path;
        public int persist_session_cookies;
        public int persist_user_preferences;
        public int ignore_certificate_errors;
        public byte accept_language_list;
        public RequestContextSettings() {
          super(RUNTIME);
        }
        public RequestContextSettings(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :size ::
     *   (Integer) Size of this structure.
     * :windowlessFrameRate ::
     *   (Integer) The maximum rate in frames per second (fps) that CefRenderHandler::OnPaint
     *   will be called for a windowless browser. The actual fps may be lower if
     *   the browser cannot generate frames at the requested rate. The minimum
     *   value is 1 and the maximum value is 60 (default 30). This value can also be
     *   changed dynamically via CefBrowserHost::SetWindowlessFrameRate.
     * :standardFontFamily ::
     *   (unknown) Font settings.
     * :fixedFontFamily ::
     *   (unknown) 
     * :serifFontFamily ::
     *   (unknown) 
     * :sansSerifFontFamily ::
     *   (unknown) 
     * :cursiveFontFamily ::
     *   (unknown) 
     * :fantasyFontFamily ::
     *   (unknown) 
     * :defaultFontSize ::
     *   (Integer) 
     * :defaultFixedFontSize ::
     *   (Integer) 
     * :minimumFontSize ::
     *   (Integer) 
     * :minimumLogicalFontSize ::
     *   (Integer) 
     * :defaultEncoding ::
     *   (unknown) Default encoding for Web content. If empty "ISO-8859-1" will be used. Also
     *   configurable using the "default-encoding" command-line switch.
     * :remoteFonts ::
     *   (Symbol from _enum_State_) Controls the loading of fonts from remote sources. Also configurable using
     *   the "disable-remote-fonts" command-line switch.
     * :javascript ::
     *   (Symbol from _enum_State_) Controls whether JavaScript can be executed. Also configurable using the
     *   "disable-javascript" command-line switch.
     * :javascriptOpenWindows ::
     *   (Symbol from _enum_State_) Controls whether JavaScript can be used for opening windows. Also
     *   configurable using the "disable-javascript-open-windows" command-line
     *   switch.
     * :javascriptCloseWindows ::
     *   (Symbol from _enum_State_) Controls whether JavaScript can be used to close windows that were not
     *   opened via JavaScript. JavaScript can still be used to close windows that
     *   were opened via JavaScript or that have no back/forward history. Also
     *   configurable using the "disable-javascript-close-windows" command-line
     *   switch.
     * :javascriptAccessClipboard ::
     *   (Symbol from _enum_State_) Controls whether JavaScript can access the clipboard. Also configurable
     *   using the "disable-javascript-access-clipboard" command-line switch.
     * :javascriptDomPaste ::
     *   (Symbol from _enum_State_) Controls whether DOM pasting is supported in the editor via
     *   execCommand("paste"). The |javascript_access_clipboard| setting must also
     *   be enabled. Also configurable using the "disable-javascript-dom-paste"
     *   command-line switch.
     * :caretBrowsing ::
     *   (Symbol from _enum_State_) Controls whether the caret position will be drawn. Also configurable using
     *   the "enable-caret-browsing" command-line switch.
     * :plugins ::
     *   (Symbol from _enum_State_) Controls whether any plugins will be loaded. Also configurable using the
     *   "disable-plugins" command-line switch.
     * :universalAccessFromFileUrls ::
     *   (Symbol from _enum_State_) Controls whether file URLs will have access to all URLs. Also configurable
     *   using the "allow-universal-access-from-files" command-line switch.
     * :fileAccessFromFileUrls ::
     *   (Symbol from _enum_State_) Controls whether file URLs will have access to other file URLs. Also
     *   configurable using the "allow-access-from-files" command-line switch.
     * :webSecurity ::
     *   (Symbol from _enum_State_) Controls whether web security restrictions (same-origin policy) will be
     *   enforced. Disabling this setting is not recommend as it will allow risky
     *   security behavior such as cross-site scripting (XSS). Also configurable
     *   using the "disable-web-security" command-line switch.
     * :imageLoading ::
     *   (Symbol from _enum_State_) Controls whether image URLs will be loaded from the network. A cached image
     *   will still be rendered if requested. Also configurable using the
     *   "disable-image-loading" command-line switch.
     * :imageShrinkStandaloneToFit ::
     *   (Symbol from _enum_State_) Controls whether standalone images will be shrunk to fit the page. Also
     *   configurable using the "image-shrink-standalone-to-fit" command-line
     *   switch.
     * :textAreaResize ::
     *   (Symbol from _enum_State_) Controls whether text areas can be resized. Also configurable using the
     *   "disable-text-area-resize" command-line switch.
     * :tabToLinks ::
     *   (Symbol from _enum_State_) Controls whether the tab key can advance focus to links. Also configurable
     *   using the "disable-tab-to-links" command-line switch.
     * :localStorage ::
     *   (Symbol from _enum_State_) Controls whether local storage can be used. Also configurable using the
     *   "disable-local-storage" command-line switch.
     * :databases ::
     *   (Symbol from _enum_State_) Controls whether databases can be used. Also configurable using the
     *   "disable-databases" command-line switch.
     * :applicationCache ::
     *   (Symbol from _enum_State_) Controls whether the application cache can be used. Also configurable using
     *   the "disable-application-cache" command-line switch.
     * :webgl ::
     *   (Symbol from _enum_State_) Controls whether WebGL can be used. Note that WebGL requires hardware
     *   support and may not work on all systems even when enabled. Also
     *   configurable using the "disable-webgl" command-line switch.
     * :backgroundColor ::
     *   (Integer) Opaque background color used for the browser before a document is loaded
     *   and when no document color is specified. By default the background color
     *   will be the same as CefSettings.background_color. Only the RGB compontents
     *   of the specified value will be used. The alpha component must greater than
     *   0 to enable use of the background color but will be otherwise ignored.
     * :acceptLanguageList ::
     *   (unknown) Comma delimited ordered list of language codes without any whitespace that
     *   will be used in the "Accept-Language" HTTP header. May be set globally
     *   using the CefBrowserSettings.accept_language_list value. If both values are
     *   empty then "en-US,en" will be used.
     */
    public static final class BrowserSettings extends Struct {
        public NativeLong size;
        public int windowless_frame_rate;
        public byte standard_font_family;
        public byte fixed_font_family;
        public byte serif_font_family;
        public byte sans_serif_font_family;
        public byte cursive_font_family;
        public byte fantasy_font_family;
        public int default_font_size;
        public int default_fixed_font_size;
        public int minimum_font_size;
        public int minimum_logical_font_size;
        public byte default_encoding;
        public State remote_fonts;
        public State javascript;
        public State javascript_open_windows;
        public State javascript_close_windows;
        public State javascript_access_clipboard;
        public State javascript_dom_paste;
        public State caret_browsing;
        public State plugins;
        public State universal_access_from_file_urls;
        public State file_access_from_file_urls;
        public State web_security;
        public State image_loading;
        public State image_shrink_standalone_to_fit;
        public State text_area_resize;
        public State tab_to_links;
        public State local_storage;
        public State databases;
        public State application_cache;
        public State webgl;
        public int background_color;
        public byte accept_language_list;
        public BrowserSettings() {
          super(RUNTIME);
        }
        public BrowserSettings(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ReturnValue).</em>
     * 
     * === Options:
     * RV_CANCEL ::
     *   Cancel immediately.
     * RV_CONTINUE ::
     *   Continue immediately.
     * RV_CONTINUE_ASYNC ::
     *   Continue asynchronously (usually via a callback).
     * 
     * @method _enum_ReturnValue_
     * @return [Symbol]
     * @scope class
     */
    public enum ReturnValue implements EnumMapper.IntegerEnum {
        RV_CANCEL(Long.valueOf(0L).intValue()),
        RV_CONTINUE(Long.valueOf(1L).intValue()),
        RV_CONTINUE_ASYNC(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private ReturnValue(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :spec ::
     *   (unknown) The complete URL specification.
     * :scheme ::
     *   (unknown) Scheme component not including the colon (e.g., "http").
     * :username ::
     *   (unknown) User name component.
     * :password ::
     *   (unknown) Password component.
     * :host ::
     *   (unknown) Host component. This may be a hostname, an IPv4 address or an IPv6 literal
     *   surrounded by square brackets (e.g., "(2001:db8::1)").
     * :port ::
     *   (unknown) Port number component.
     * :origin ::
     *   (unknown) Origin contains just the scheme, host, and port from a URL. Equivalent to
     *   clearing any username and password, replacing the path with a slash, and
     *   clearing everything after that. This value will be empty for non-standard
     *   URLs.
     * :path ::
     *   (unknown) Path component including the first slash following the host.
     * :query ::
     *   (unknown) Query string component (i.e., everything following the '?').
     */
    public static final class Urlparts extends Struct {
        public byte spec;
        public byte scheme;
        public byte username;
        public byte password;
        public byte host;
        public byte port;
        public byte origin;
        public byte path;
        public byte query;
        public Urlparts() {
          super(RUNTIME);
        }
        public Urlparts(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :name ::
     *   (unknown) The cookie name.
     * :value ::
     *   (unknown) The cookie value.
     * :domain ::
     *   (unknown) If |domain| is empty a host cookie will be created instead of a domain
     *   cookie. Domain cookies are stored with a leading "." and are visible to
     *   sub-domains whereas host cookies are not.
     * :path ::
     *   (unknown) If |path| is non-empty only URLs at or below the path will get the cookie
     *   value.
     * :secure ::
     *   (Integer) If |secure| is true the cookie will only be sent for HTTPS requests.
     * :httponly ::
     *   (Integer) If |httponly| is true the cookie will only be sent for HTTP requests.
     * :creation ::
     *   (unknown) The cookie creation date. This is automatically populated by the system on
     *   cookie creation.
     * :lastAccess ::
     *   (unknown) The cookie last access date. This is automatically populated by the system
     *   on access.
     * :hasExpires ::
     *   (Integer) The cookie expiration date is only valid if |has_expires| is true.
     * :expires ::
     *   (unknown) 
     */
    public static final class Cookie extends Struct {
        public byte name;
        public byte value;
        public byte domain;
        public byte path;
        public int secure;
        public int httponly;
        public byte creation;
        public byte last_access;
        public int has_expires;
        public byte expires;
        public Cookie() {
          super(RUNTIME);
        }
        public Cookie(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:TerminationStatus).</em>
     * 
     * === Options:
     * TS_ABNORMAL_TERMINATION ::
     *   Non-zero exit status.
     * TS_PROCESS_WAS_KILLED ::
     *   SIGKILL or task manager kill.
     * TS_PROCESS_CRASHED ::
     *   Segmentation fault.
     * 
     * @method _enum_TerminationStatus_
     * @return [Symbol]
     * @scope class
     */
    public enum TerminationStatus implements EnumMapper.IntegerEnum {
        TS_ABNORMAL_TERMINATION(Long.valueOf(0L).intValue()),
        TS_PROCESS_WAS_KILLED(Long.valueOf(1L).intValue()),
        TS_PROCESS_CRASHED(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private TerminationStatus(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:PathKey).</em>
     * 
     * === Options:
     * PK_DIR_CURRENT ::
     *   Current directory.
     * PK_DIR_EXE ::
     *   Directory containing PK_FILE_EXE.
     * PK_DIR_MODULE ::
     *   Directory containing PK_FILE_MODULE.
     * PK_DIR_TEMP ::
     *   Temporary directory.
     * PK_FILE_EXE ::
     *   Path and filename of the current executable.
     * PK_FILE_MODULE ::
     *   Path and filename of the module containing the CEF code (usually the libcef
     *   module).
     * PK_LOCAL_APP_DATA ::
     *   "Local Settings\Application Data" directory under the user profile
     *   directory on Windows.
     * PK_USER_DATA ::
     *   "Application Data" directory under the user profile directory on Windows
     *   and "~/Library/Application Support" directory on Mac OS X.
     * 
     * @method _enum_PathKey_
     * @return [Symbol]
     * @scope class
     */
    public enum PathKey implements EnumMapper.IntegerEnum {
        PK_DIR_CURRENT(Long.valueOf(0L).intValue()),
        PK_DIR_EXE(Long.valueOf(1L).intValue()),
        PK_DIR_MODULE(Long.valueOf(2L).intValue()),
        PK_DIR_TEMP(Long.valueOf(3L).intValue()),
        PK_FILE_EXE(Long.valueOf(4L).intValue()),
        PK_FILE_MODULE(Long.valueOf(5L).intValue()),
        PK_LOCAL_APP_DATA(Long.valueOf(6L).intValue()),
        PK_USER_DATA(Long.valueOf(7L).intValue())
        ;
        
        private int nativeInt;
        
        private PathKey(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:StorageType).</em>
     * 
     * === Options:
     * ST_LOCALSTORAGE ::
     *   
     * ST_SESSIONSTORAGE ::
     *   
     * 
     * @method _enum_StorageType_
     * @return [Symbol]
     * @scope class
     */
    public enum StorageType implements EnumMapper.IntegerEnum {
        ST_LOCALSTORAGE(Long.valueOf(0L).intValue()),
        ST_SESSIONSTORAGE(Long.valueOf(1L).intValue())
        ;
        
        private int nativeInt;
        
        private StorageType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:Errorcode).</em>
     * 
     * === Options:
     * ERR_NONE ::
     *   
     * ERR_FAILED ::
     *   
     * ERR_ABORTED ::
     *   
     * ERR_INVALID_ARGUMENT ::
     *   
     * ERR_INVALID_HANDLE ::
     *   
     * ERR_FILE_NOT_FOUND ::
     *   
     * ERR_TIMED_OUT ::
     *   
     * ERR_FILE_TOO_BIG ::
     *   
     * ERR_UNEXPECTED ::
     *   
     * ERR_ACCESS_DENIED ::
     *   
     * ERR_NOT_IMPLEMENTED ::
     *   
     * ERR_CONNECTION_CLOSED ::
     *   
     * ERR_CONNECTION_RESET ::
     *   
     * ERR_CONNECTION_REFUSED ::
     *   
     * ERR_CONNECTION_ABORTED ::
     *   
     * ERR_CONNECTION_FAILED ::
     *   
     * ERR_NAME_NOT_RESOLVED ::
     *   
     * ERR_INTERNET_DISCONNECTED ::
     *   
     * ERR_SSL_PROTOCOL_ERROR ::
     *   
     * ERR_ADDRESS_INVALID ::
     *   
     * ERR_ADDRESS_UNREACHABLE ::
     *   
     * ERR_SSL_CLIENT_AUTH_CERT_NEEDED ::
     *   
     * ERR_TUNNEL_CONNECTION_FAILED ::
     *   
     * ERR_NO_SSL_VERSIONS_ENABLED ::
     *   
     * ERR_SSL_VERSION_OR_CIPHER_MISMATCH ::
     *   
     * ERR_SSL_RENEGOTIATION_REQUESTED ::
     *   
     * ERR_CERT_COMMON_NAME_INVALID ::
     *   
     * ERR_CERT_DATE_INVALID ::
     *   
     * ERR_CERT_AUTHORITY_INVALID ::
     *   
     * ERR_CERT_CONTAINS_ERRORS ::
     *   
     * ERR_CERT_NO_REVOCATION_MECHANISM ::
     *   
     * ERR_CERT_UNABLE_TO_CHECK_REVOCATION ::
     *   
     * ERR_CERT_REVOKED ::
     *   
     * ERR_CERT_INVALID ::
     *   
     * ERR_CERT_WEAK_SIGNATURE_ALGORITHM ::
     *   
     * ERR_CERT_NON_UNIQUE_NAME ::
     *   -209 is available: was ERR_CERT_NOT_IN_DNS.
     * ERR_CERT_WEAK_KEY ::
     *   
     * ERR_CERT_NAME_CONSTRAINT_VIOLATION ::
     *   
     * ERR_CERT_VALIDITY_TOO_LONG ::
     *   
     * ERR_INVALID_URL ::
     *   
     * ERR_DISALLOWED_URL_SCHEME ::
     *   
     * ERR_UNKNOWN_URL_SCHEME ::
     *   
     * ERR_TOO_MANY_REDIRECTS ::
     *   
     * ERR_UNSAFE_REDIRECT ::
     *   
     * ERR_UNSAFE_PORT ::
     *   
     * ERR_INVALID_RESPONSE ::
     *   
     * ERR_INVALID_CHUNKED_ENCODING ::
     *   
     * ERR_METHOD_NOT_SUPPORTED ::
     *   
     * ERR_UNEXPECTED_PROXY_AUTH ::
     *   
     * ERR_EMPTY_RESPONSE ::
     *   
     * ERR_RESPONSE_HEADERS_TOO_BIG ::
     *   
     * ERR_CACHE_MISS ::
     *   
     * ERR_INSECURE_RESPONSE ::
     *   
     * 
     * @method _enum_Errorcode_
     * @return [Symbol]
     * @scope class
     */
    public enum Errorcode implements EnumMapper.IntegerEnum {
        ERR_NONE(Long.valueOf(0L).intValue()),
        ERR_FAILED(Long.valueOf(-2L).intValue()),
        ERR_ABORTED(Long.valueOf(-3L).intValue()),
        ERR_INVALID_ARGUMENT(Long.valueOf(-4L).intValue()),
        ERR_INVALID_HANDLE(Long.valueOf(-5L).intValue()),
        ERR_FILE_NOT_FOUND(Long.valueOf(-6L).intValue()),
        ERR_TIMED_OUT(Long.valueOf(-7L).intValue()),
        ERR_FILE_TOO_BIG(Long.valueOf(-8L).intValue()),
        ERR_UNEXPECTED(Long.valueOf(-9L).intValue()),
        ERR_ACCESS_DENIED(Long.valueOf(-10L).intValue()),
        ERR_NOT_IMPLEMENTED(Long.valueOf(-11L).intValue()),
        ERR_CONNECTION_CLOSED(Long.valueOf(-100L).intValue()),
        ERR_CONNECTION_RESET(Long.valueOf(-101L).intValue()),
        ERR_CONNECTION_REFUSED(Long.valueOf(-102L).intValue()),
        ERR_CONNECTION_ABORTED(Long.valueOf(-103L).intValue()),
        ERR_CONNECTION_FAILED(Long.valueOf(-104L).intValue()),
        ERR_NAME_NOT_RESOLVED(Long.valueOf(-105L).intValue()),
        ERR_INTERNET_DISCONNECTED(Long.valueOf(-106L).intValue()),
        ERR_SSL_PROTOCOL_ERROR(Long.valueOf(-107L).intValue()),
        ERR_ADDRESS_INVALID(Long.valueOf(-108L).intValue()),
        ERR_ADDRESS_UNREACHABLE(Long.valueOf(-109L).intValue()),
        ERR_SSL_CLIENT_AUTH_CERT_NEEDED(Long.valueOf(-110L).intValue()),
        ERR_TUNNEL_CONNECTION_FAILED(Long.valueOf(-111L).intValue()),
        ERR_NO_SSL_VERSIONS_ENABLED(Long.valueOf(-112L).intValue()),
        ERR_SSL_VERSION_OR_CIPHER_MISMATCH(Long.valueOf(-113L).intValue()),
        ERR_SSL_RENEGOTIATION_REQUESTED(Long.valueOf(-114L).intValue()),
        ERR_CERT_COMMON_NAME_INVALID(Long.valueOf(-200L).intValue()),
        ERR_CERT_DATE_INVALID(Long.valueOf(-201L).intValue()),
        ERR_CERT_AUTHORITY_INVALID(Long.valueOf(-202L).intValue()),
        ERR_CERT_CONTAINS_ERRORS(Long.valueOf(-203L).intValue()),
        ERR_CERT_NO_REVOCATION_MECHANISM(Long.valueOf(-204L).intValue()),
        ERR_CERT_UNABLE_TO_CHECK_REVOCATION(Long.valueOf(-205L).intValue()),
        ERR_CERT_REVOKED(Long.valueOf(-206L).intValue()),
        ERR_CERT_INVALID(Long.valueOf(-207L).intValue()),
        ERR_CERT_WEAK_SIGNATURE_ALGORITHM(Long.valueOf(-208L).intValue()),
        ERR_CERT_NON_UNIQUE_NAME(Long.valueOf(-210L).intValue()),
        ERR_CERT_WEAK_KEY(Long.valueOf(-211L).intValue()),
        ERR_CERT_NAME_CONSTRAINT_VIOLATION(Long.valueOf(-212L).intValue()),
        ERR_CERT_VALIDITY_TOO_LONG(Long.valueOf(-213L).intValue()),
        ERR_INVALID_URL(Long.valueOf(-300L).intValue()),
        ERR_DISALLOWED_URL_SCHEME(Long.valueOf(-301L).intValue()),
        ERR_UNKNOWN_URL_SCHEME(Long.valueOf(-302L).intValue()),
        ERR_TOO_MANY_REDIRECTS(Long.valueOf(-310L).intValue()),
        ERR_UNSAFE_REDIRECT(Long.valueOf(-311L).intValue()),
        ERR_UNSAFE_PORT(Long.valueOf(-312L).intValue()),
        ERR_INVALID_RESPONSE(Long.valueOf(-320L).intValue()),
        ERR_INVALID_CHUNKED_ENCODING(Long.valueOf(-321L).intValue()),
        ERR_METHOD_NOT_SUPPORTED(Long.valueOf(-322L).intValue()),
        ERR_UNEXPECTED_PROXY_AUTH(Long.valueOf(-323L).intValue()),
        ERR_EMPTY_RESPONSE(Long.valueOf(-324L).intValue()),
        ERR_RESPONSE_HEADERS_TOO_BIG(Long.valueOf(-325L).intValue()),
        ERR_CACHE_MISS(Long.valueOf(-400L).intValue()),
        ERR_INSECURE_RESPONSE(Long.valueOf(-501L).intValue())
        ;
        
        private int nativeInt;
        
        private Errorcode(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:CertStatus).</em>
     * 
     * === Options:
     * NONE ::
     *   
     * COMMON_NAME_INVALID ::
     *   
     * DATE_INVALID ::
     *   
     * AUTHORITY_INVALID ::
     *   
     * NO_REVOCATION_MECHANISM ::
     *   1 << 3 is reserved for ERR_CERT_CONTAINS_ERRORS (not useful with WinHTTP).
     * UNABLE_TO_CHECK_REVOCATION ::
     *   
     * REVOKED ::
     *   
     * INVALID ::
     *   
     * WEAK_SIGNATURE_ALGORITHM ::
     *   
     * NON_UNIQUE_NAME ::
     *   1 << 9 was used for CERT_STATUS_NOT_IN_DNS
     * WEAK_KEY ::
     *   
     * PINNED_KEY_MISSING ::
     *   1 << 12 was used for CERT_STATUS_WEAK_DH_KEY
     * NAME_CONSTRAINT_VIOLATION ::
     *   
     * VALIDITY_TOO_LONG ::
     *   
     * IS_EV ::
     *   Bits 16 to 31 are for non-error statuses.
     * REV_CHECKING_ENABLED ::
     *   
     * SHA1_SIGNATURE_PRESENT ::
     *   Bit 18 was CERT_STATUS_IS_DNSSEC
     * CT_COMPLIANCE_FAILED ::
     *   
     * 
     * @method _enum_CertStatus_
     * @return [Symbol]
     * @scope class
     */
    public enum CertStatus implements EnumMapper.IntegerEnum {
        NONE(Long.valueOf(0L).intValue()),
        COMMON_NAME_INVALID(Long.valueOf(1L).intValue()),
        DATE_INVALID(Long.valueOf(2L).intValue()),
        AUTHORITY_INVALID(Long.valueOf(4L).intValue()),
        NO_REVOCATION_MECHANISM(Long.valueOf(16L).intValue()),
        UNABLE_TO_CHECK_REVOCATION(Long.valueOf(32L).intValue()),
        REVOKED(Long.valueOf(64L).intValue()),
        INVALID(Long.valueOf(128L).intValue()),
        WEAK_SIGNATURE_ALGORITHM(Long.valueOf(256L).intValue()),
        NON_UNIQUE_NAME(Long.valueOf(1024L).intValue()),
        WEAK_KEY(Long.valueOf(2048L).intValue()),
        PINNED_KEY_MISSING(Long.valueOf(8192L).intValue()),
        NAME_CONSTRAINT_VIOLATION(Long.valueOf(16384L).intValue()),
        VALIDITY_TOO_LONG(Long.valueOf(32768L).intValue()),
        IS_EV(Long.valueOf(65536L).intValue()),
        REV_CHECKING_ENABLED(Long.valueOf(131072L).intValue()),
        SHA1_SIGNATURE_PRESENT(Long.valueOf(524288L).intValue()),
        CT_COMPLIANCE_FAILED(Long.valueOf(1048576L).intValue())
        ;
        
        private int nativeInt;
        
        private CertStatus(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:WindowOpenDisposition).</em>
     * 
     * === Options:
     * WOD_UNKNOWN ::
     *   
     * WOD_SUPPRESS_OPEN ::
     *   
     * WOD_CURRENT_TAB ::
     *   
     * WOD_SINGLETON_TAB ::
     *   
     * WOD_NEW_FOREGROUND_TAB ::
     *   
     * WOD_NEW_BACKGROUND_TAB ::
     *   
     * WOD_NEW_POPUP ::
     *   
     * WOD_NEW_WINDOW ::
     *   
     * WOD_SAVE_TO_DISK ::
     *   
     * WOD_OFF_THE_RECORD ::
     *   
     * WOD_IGNORE_ACTION ::
     *   
     * 
     * @method _enum_WindowOpenDisposition_
     * @return [Symbol]
     * @scope class
     */
    public enum WindowOpenDisposition implements EnumMapper.IntegerEnum {
        WOD_UNKNOWN(Long.valueOf(0L).intValue()),
        WOD_SUPPRESS_OPEN(Long.valueOf(1L).intValue()),
        WOD_CURRENT_TAB(Long.valueOf(2L).intValue()),
        WOD_SINGLETON_TAB(Long.valueOf(3L).intValue()),
        WOD_NEW_FOREGROUND_TAB(Long.valueOf(4L).intValue()),
        WOD_NEW_BACKGROUND_TAB(Long.valueOf(5L).intValue()),
        WOD_NEW_POPUP(Long.valueOf(6L).intValue()),
        WOD_NEW_WINDOW(Long.valueOf(7L).intValue()),
        WOD_SAVE_TO_DISK(Long.valueOf(8L).intValue()),
        WOD_OFF_THE_RECORD(Long.valueOf(9L).intValue()),
        WOD_IGNORE_ACTION(Long.valueOf(10L).intValue())
        ;
        
        private int nativeInt;
        
        private WindowOpenDisposition(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:DragOperationsMask).</em>
     * 
     * === Options:
     * OPERATION_NONE ::
     *   
     * OPERATION_COPY ::
     *   
     * OPERATION_LINK ::
     *   
     * OPERATION_GENERIC ::
     *   
     * OPERATION_PRIVATE ::
     *   
     * OPERATION_MOVE ::
     *   
     * OPERATION_DELETE ::
     *   
     * 
     * @method _enum_DragOperationsMask_
     * @return [Symbol]
     * @scope class
     */
    public enum DragOperationsMask implements EnumMapper.IntegerEnum {
        OPERATION_NONE(Long.valueOf(0L).intValue()),
        OPERATION_COPY(Long.valueOf(1L).intValue()),
        OPERATION_LINK(Long.valueOf(2L).intValue()),
        OPERATION_GENERIC(Long.valueOf(4L).intValue()),
        OPERATION_PRIVATE(Long.valueOf(8L).intValue()),
        OPERATION_MOVE(Long.valueOf(16L).intValue()),
        OPERATION_DELETE(Long.valueOf(32L).intValue())
        ;
        
        private int nativeInt;
        
        private DragOperationsMask(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:V8Accesscontrol).</em>
     * 
     * === Options:
     * ACCESS_CONTROL_DEFAULT ::
     *   
     * ACCESS_CONTROL_ALL_CAN_READ ::
     *   
     * ACCESS_CONTROL_ALL_CAN_WRITE ::
     *   
     * ACCESS_CONTROL_PROHIBITS_OVERWRITING ::
     *   
     * 
     * @method _enum_V8Accesscontrol_
     * @return [Symbol]
     * @scope class
     */
    public enum V8Accesscontrol implements EnumMapper.IntegerEnum {
        ACCESS_CONTROL_DEFAULT(Long.valueOf(0L).intValue()),
        ACCESS_CONTROL_ALL_CAN_READ(Long.valueOf(1L).intValue()),
        ACCESS_CONTROL_ALL_CAN_WRITE(Long.valueOf(2L).intValue()),
        ACCESS_CONTROL_PROHIBITS_OVERWRITING(Long.valueOf(4L).intValue())
        ;
        
        private int nativeInt;
        
        private V8Accesscontrol(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:V8Propertyattribute).</em>
     * 
     * === Options:
     * PROPERTY_ATTRIBUTE_NONE ::
     *   
     * PROPERTY_ATTRIBUTE_READONLY ::
     *   Configurable
     * PROPERTY_ATTRIBUTE_DONTENUM ::
     *   Not writeable
     * PROPERTY_ATTRIBUTE_DONTDELETE ::
     *   Not enumerable
     * 
     * @method _enum_V8Propertyattribute_
     * @return [Symbol]
     * @scope class
     */
    public enum V8Propertyattribute implements EnumMapper.IntegerEnum {
        PROPERTY_ATTRIBUTE_NONE(Long.valueOf(0L).intValue()),
        PROPERTY_ATTRIBUTE_READONLY(Long.valueOf(1L).intValue()),
        PROPERTY_ATTRIBUTE_DONTENUM(Long.valueOf(2L).intValue()),
        PROPERTY_ATTRIBUTE_DONTDELETE(Long.valueOf(4L).intValue())
        ;
        
        private int nativeInt;
        
        private V8Propertyattribute(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:PostdataelementType).</em>
     * 
     * === Options:
     * PDE_TYPE_EMPTY ::
     *   
     * PDE_TYPE_BYTES ::
     *   
     * PDE_TYPE_FILE ::
     *   
     * 
     * @method _enum_PostdataelementType_
     * @return [Symbol]
     * @scope class
     */
    public enum PostdataelementType implements EnumMapper.IntegerEnum {
        PDE_TYPE_EMPTY(Long.valueOf(0L).intValue()),
        PDE_TYPE_BYTES(Long.valueOf(1L).intValue()),
        PDE_TYPE_FILE(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private PostdataelementType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ResourceType).</em>
     * 
     * === Options:
     * RT_MAIN_FRAME ::
     *   Top level page.
     * RT_SUB_FRAME ::
     *   Frame or iframe.
     * RT_STYLESHEET ::
     *   CSS stylesheet.
     * RT_SCRIPT ::
     *   External script.
     * RT_IMAGE ::
     *   Image (jpg/gif/png/etc).
     * RT_FONT_RESOURCE ::
     *   Font.
     * RT_SUB_RESOURCE ::
     *   Some other subresource. This is the default type if the actual type is
     *   unknown.
     * RT_OBJECT ::
     *   Object (or embed) tag for a plugin, or a resource that a plugin requested.
     * RT_MEDIA ::
     *   Media resource.
     * RT_WORKER ::
     *   Main resource of a dedicated worker.
     * RT_SHARED_WORKER ::
     *   Main resource of a shared worker.
     * RT_PREFETCH ::
     *   Explicitly requested prefetch.
     * RT_FAVICON ::
     *   Favicon.
     * RT_XHR ::
     *   XMLHttpRequest.
     * RT_PING ::
     *   A request for a <ping>
     * RT_SERVICE_WORKER ::
     *   Main resource of a service worker.
     * RT_CSP_REPORT ::
     *   A report of Content Security Policy violations.
     * RT_PLUGIN_RESOURCE ::
     *   A resource that a plugin requested.
     * 
     * @method _enum_ResourceType_
     * @return [Symbol]
     * @scope class
     */
    public enum ResourceType implements EnumMapper.IntegerEnum {
        RT_MAIN_FRAME(Long.valueOf(0L).intValue()),
        RT_SUB_FRAME(Long.valueOf(1L).intValue()),
        RT_STYLESHEET(Long.valueOf(2L).intValue()),
        RT_SCRIPT(Long.valueOf(3L).intValue()),
        RT_IMAGE(Long.valueOf(4L).intValue()),
        RT_FONT_RESOURCE(Long.valueOf(5L).intValue()),
        RT_SUB_RESOURCE(Long.valueOf(6L).intValue()),
        RT_OBJECT(Long.valueOf(7L).intValue()),
        RT_MEDIA(Long.valueOf(8L).intValue()),
        RT_WORKER(Long.valueOf(9L).intValue()),
        RT_SHARED_WORKER(Long.valueOf(10L).intValue()),
        RT_PREFETCH(Long.valueOf(11L).intValue()),
        RT_FAVICON(Long.valueOf(12L).intValue()),
        RT_XHR(Long.valueOf(13L).intValue()),
        RT_PING(Long.valueOf(14L).intValue()),
        RT_SERVICE_WORKER(Long.valueOf(15L).intValue()),
        RT_CSP_REPORT(Long.valueOf(16L).intValue()),
        RT_PLUGIN_RESOURCE(Long.valueOf(17L).intValue())
        ;
        
        private int nativeInt;
        
        private ResourceType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:TransitionType).</em>
     * 
     * === Options:
     * TT_LINK ::
     *   Source is a link click or the JavaScript window.open function. This is
     *   also the default value for requests like sub-resource loads that are not
     *   navigations.
     * TT_EXPLICIT ::
     *   Source is some other "explicit" navigation action such as creating a new
     *   browser or using the LoadURL function. This is also the default value
     *   for navigations where the actual type is unknown.
     * TT_AUTO_SUBFRAME ::
     *   Source is a subframe navigation. This is any content that is automatically
     *   loaded in a non-toplevel frame. For example, if a page consists of several
     *   frames containing ads, those ad URLs will have this transition type.
     *   The user may not even realize the content in these pages is a separate
     *   frame, so may not care about the URL.
     * TT_MANUAL_SUBFRAME ::
     *   Source is a subframe navigation explicitly requested by the user that will
     *   generate new navigation entries in the back/forward list. These are
     *   probably more important than frames that were automatically loaded in
     *   the background because the user probably cares about the fact that this
     *   link was loaded.
     * TT_FORM_SUBMIT ::
     *   Source is a form submission by the user. NOTE: In some situations
     *   submitting a form does not result in this transition type. This can happen
     *   if the form uses a script to submit the contents.
     * TT_RELOAD ::
     *   Source is a "reload" of the page via the Reload function or by re-visiting
     *   the same URL. NOTE: This is distinct from the concept of whether a
     *   particular load uses "reload semantics" (i.e. bypasses cached data).
     * TT_SOURCE_MASK ::
     *   General mask defining the bits used for the source values.
     * TT_BLOCKED_FLAG ::
     *   Attempted to visit a URL but was blocked.
     * TT_FORWARD_BACK_FLAG ::
     *   Used the Forward or Back function to navigate among browsing history.
     * TT_CHAIN_START_FLAG ::
     *   The beginning of a navigation chain.
     * TT_CHAIN_END_FLAG ::
     *   The last transition in a redirect chain.
     * TT_CLIENT_REDIRECT_FLAG ::
     *   Redirects caused by JavaScript or a meta refresh tag on the page.
     * TT_SERVER_REDIRECT_FLAG ::
     *   Redirects sent from the server by HTTP headers.
     * TT_IS_REDIRECT_MASK ::
     *   Used to test whether a transition involves a redirect.
     * TT_QUALIFIER_MASK ::
     *   General mask defining the bits used for the qualifiers.
     * 
     * @method _enum_TransitionType_
     * @return [Symbol]
     * @scope class
     */
    public enum TransitionType implements EnumMapper.IntegerEnum {
        TT_LINK(Long.valueOf(0L).intValue()),
        TT_EXPLICIT(Long.valueOf(1L).intValue()),
        TT_AUTO_SUBFRAME(Long.valueOf(3L).intValue()),
        TT_MANUAL_SUBFRAME(Long.valueOf(4L).intValue()),
        TT_FORM_SUBMIT(Long.valueOf(7L).intValue()),
        TT_RELOAD(Long.valueOf(8L).intValue()),
        TT_SOURCE_MASK(Long.valueOf(255L).intValue()),
        TT_BLOCKED_FLAG(Long.valueOf(8388608L).intValue()),
        TT_FORWARD_BACK_FLAG(Long.valueOf(16777216L).intValue()),
        TT_CHAIN_START_FLAG(Long.valueOf(268435456L).intValue()),
        TT_CHAIN_END_FLAG(Long.valueOf(536870912L).intValue()),
        TT_CLIENT_REDIRECT_FLAG(Long.valueOf(1073741824L).intValue()),
        TT_SERVER_REDIRECT_FLAG(Long.valueOf(2147483648L).intValue()),
        TT_IS_REDIRECT_MASK(Long.valueOf(3221225472L).intValue()),
        TT_QUALIFIER_MASK(Long.valueOf(4294967040L).intValue())
        ;
        
        private int nativeInt;
        
        private TransitionType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:UrlrequestFlags).</em>
     * 
     * === Options:
     * UR_FLAG_NONE ::
     *   Default behavior.
     * UR_FLAG_SKIP_CACHE ::
     *   If set the cache will be skipped when handling the request.
     * UR_FLAG_ALLOW_CACHED_CREDENTIALS ::
     *   If set user name, password, and cookies may be sent with the request, and
     *   cookies may be saved from the response.
     * UR_FLAG_REPORT_UPLOAD_PROGRESS ::
     *   If set upload progress events will be generated when a request has a body.
     * UR_FLAG_NO_DOWNLOAD_DATA ::
     *   If set the CefURLRequestClient::OnDownloadData method will not be called.
     * UR_FLAG_NO_RETRY_ON_5XX ::
     *   If set 5XX redirect errors will be propagated to the observer instead of
     *   automatically re-tried. This currently only applies for requests
     *   originated in the browser process.
     * 
     * @method _enum_UrlrequestFlags_
     * @return [Symbol]
     * @scope class
     */
    public enum UrlrequestFlags implements EnumMapper.IntegerEnum {
        UR_FLAG_NONE(Long.valueOf(0L).intValue()),
        UR_FLAG_SKIP_CACHE(Long.valueOf(1L).intValue()),
        UR_FLAG_ALLOW_CACHED_CREDENTIALS(Long.valueOf(2L).intValue()),
        UR_FLAG_REPORT_UPLOAD_PROGRESS(Long.valueOf(8L).intValue()),
        UR_FLAG_NO_DOWNLOAD_DATA(Long.valueOf(64L).intValue()),
        UR_FLAG_NO_RETRY_ON_5XX(Long.valueOf(128L).intValue())
        ;
        
        private int nativeInt;
        
        private UrlrequestFlags(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:UrlrequestStatus).</em>
     * 
     * === Options:
     * UR_UNKNOWN ::
     *   Unknown status.
     * UR_SUCCESS ::
     *   Request succeeded.
     * UR_IO_PENDING ::
     *   An IO request is pending, and the caller will be informed when it is
     *   completed.
     * UR_CANCELED ::
     *   Request was canceled programatically.
     * UR_FAILED ::
     *   Request failed for some reason.
     * 
     * @method _enum_UrlrequestStatus_
     * @return [Symbol]
     * @scope class
     */
    public enum UrlrequestStatus implements EnumMapper.IntegerEnum {
        UR_UNKNOWN(Long.valueOf(0L).intValue()),
        UR_SUCCESS(Long.valueOf(1L).intValue()),
        UR_IO_PENDING(Long.valueOf(2L).intValue()),
        UR_CANCELED(Long.valueOf(3L).intValue()),
        UR_FAILED(Long.valueOf(4L).intValue())
        ;
        
        private int nativeInt;
        
        private UrlrequestStatus(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :x ::
     *   (Integer) 
     * :y ::
     *   (Integer) 
     */
    public static final class Point extends Struct {
        public int x;
        public int y;
        public Point() {
          super(RUNTIME);
        }
        public Point(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :x ::
     *   (Integer) 
     * :y ::
     *   (Integer) 
     * :width ::
     *   (Integer) 
     * :height ::
     *   (Integer) 
     */
    public static final class Rect extends Struct {
        public int x;
        public int y;
        public int width;
        public int height;
        public Rect() {
          super(RUNTIME);
        }
        public Rect(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :width ::
     *   (Integer) 
     * :height ::
     *   (Integer) 
     */
    public static final class Size extends Struct {
        public int width;
        public int height;
        public Size() {
          super(RUNTIME);
        }
        public Size(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :from ::
     *   (Integer) 
     * :to ::
     *   (Integer) 
     */
    public static final class Range extends Struct {
        public int from;
        public int to;
        public Range() {
          super(RUNTIME);
        }
        public Range(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :top ::
     *   (Integer) 
     * :left ::
     *   (Integer) 
     * :bottom ::
     *   (Integer) 
     * :right ::
     *   (Integer) 
     */
    public static final class Insets extends Struct {
        public int top;
        public int left;
        public int bottom;
        public int right;
        public Insets() {
          super(RUNTIME);
        }
        public Insets(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :bounds ::
     *   (Rect) Bounds of the region.
     * :draggable ::
     *   (Integer) True (1) this this region is draggable and false (0) otherwise.
     */
    public static final class DraggableRegion extends Struct {
        public Rect bounds;
        public int draggable;
        public DraggableRegion() {
          super(RUNTIME);
        }
        public DraggableRegion(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ProcessId).</em>
     * 
     * === Options:
     * PID_BROWSER ::
     *   Browser process.
     * PID_RENDERER ::
     *   Renderer process.
     * 
     * @method _enum_ProcessId_
     * @return [Symbol]
     * @scope class
     */
    public enum ProcessId implements EnumMapper.IntegerEnum {
        PID_BROWSER(Long.valueOf(0L).intValue()),
        PID_RENDERER(Long.valueOf(1L).intValue())
        ;
        
        private int nativeInt;
        
        private ProcessId(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ThreadId).</em>
     * 
     * === Options:
     * TID_UI ::
     *   The main thread in the browser. This will be the same as the main
     *   application thread if CefInitialize() is called with a
     *   CefSettings.multi_threaded_message_loop value of false.
     * TID_DB ::
     *   Used to interact with the database.
     * TID_FILE ::
     *   Used to interact with the file system.
     * TID_FILE_USER_BLOCKING ::
     *   Used for file system operations that block user interactions.
     *   Responsiveness of this thread affects users.
     * TID_PROCESS_LAUNCHER ::
     *   Used to launch and terminate browser processes.
     * TID_CACHE ::
     *   Used to handle slow HTTP cache operations.
     * TID_IO ::
     *   Used to process IPC and network messages.
     * TID_RENDERER ::
     *   The main thread in the renderer. Used for all WebKit and V8 interaction.
     * 
     * @method _enum_ThreadId_
     * @return [Symbol]
     * @scope class
     */
    public enum ThreadId implements EnumMapper.IntegerEnum {
        TID_UI(Long.valueOf(0L).intValue()),
        TID_DB(Long.valueOf(1L).intValue()),
        TID_FILE(Long.valueOf(2L).intValue()),
        TID_FILE_USER_BLOCKING(Long.valueOf(3L).intValue()),
        TID_PROCESS_LAUNCHER(Long.valueOf(4L).intValue()),
        TID_CACHE(Long.valueOf(5L).intValue()),
        TID_IO(Long.valueOf(6L).intValue()),
        TID_RENDERER(Long.valueOf(7L).intValue())
        ;
        
        private int nativeInt;
        
        private ThreadId(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ValueType).</em>
     * 
     * === Options:
     * VTYPE_INVALID ::
     *   
     * VTYPE_NULL ::
     *   
     * VTYPE_BOOL ::
     *   
     * VTYPE_INT ::
     *   
     * VTYPE_DOUBLE ::
     *   
     * VTYPE_STRING ::
     *   
     * VTYPE_BINARY ::
     *   
     * VTYPE_DICTIONARY ::
     *   
     * VTYPE_LIST ::
     *   
     * 
     * @method _enum_ValueType_
     * @return [Symbol]
     * @scope class
     */
    public enum ValueType implements EnumMapper.IntegerEnum {
        VTYPE_INVALID(Long.valueOf(0L).intValue()),
        VTYPE_NULL(Long.valueOf(1L).intValue()),
        VTYPE_BOOL(Long.valueOf(2L).intValue()),
        VTYPE_INT(Long.valueOf(3L).intValue()),
        VTYPE_DOUBLE(Long.valueOf(4L).intValue()),
        VTYPE_STRING(Long.valueOf(5L).intValue()),
        VTYPE_BINARY(Long.valueOf(6L).intValue()),
        VTYPE_DICTIONARY(Long.valueOf(7L).intValue()),
        VTYPE_LIST(Long.valueOf(8L).intValue())
        ;
        
        private int nativeInt;
        
        private ValueType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:JsdialogType).</em>
     * 
     * === Options:
     * JSDIALOGTYPE_ALERT ::
     *   
     * JSDIALOGTYPE_CONFIRM ::
     *   
     * JSDIALOGTYPE_PROMPT ::
     *   
     * 
     * @method _enum_JsdialogType_
     * @return [Symbol]
     * @scope class
     */
    public enum JsdialogType implements EnumMapper.IntegerEnum {
        JSDIALOGTYPE_ALERT(Long.valueOf(0L).intValue()),
        JSDIALOGTYPE_CONFIRM(Long.valueOf(1L).intValue()),
        JSDIALOGTYPE_PROMPT(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private JsdialogType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :deviceScaleFactor ::
     *   (Float) Device scale factor. Specifies the ratio between physical and logical
     *   pixels.
     * :depth ::
     *   (Integer) The screen depth in bits per pixel.
     * :depthPerComponent ::
     *   (Integer) The bits per color component. This assumes that the colors are balanced
     *   equally.
     * :isMonochrome ::
     *   (Integer) This can be true for black and white printers.
     * :rect ::
     *   (Rect) This is set from the rcMonitor member of MONITORINFOEX, to whit:
     *     "A RECT structure that specifies the display monitor rectangle,
     *     expressed in virtual-screen coordinates. Note that if the monitor
     *     is not the primary display monitor, some of the rectangle's
     *     coordinates may be negative values."
     *   
     *   The |rect| and |available_rect| properties are used to determine the
     *   available surface for rendering popup views.
     * :availableRect ::
     *   (Rect) This is set from the rcWork member of MONITORINFOEX, to whit:
     *     "A RECT structure that specifies the work area rectangle of the
     *     display monitor that can be used by applications, expressed in
     *     virtual-screen coordinates. Windows uses this rectangle to
     *     maximize an application on the monitor. The rest of the area in
     *     rcMonitor contains system windows such as the task bar and side
     *     bars. Note that if the monitor is not the primary display monitor,
     *     some of the rectangle's coordinates may be negative values".
     *   
     *   The |rect| and |available_rect| properties are used to determine the
     *   available surface for rendering popup views.
     */
    public static final class ScreenInfo extends Struct {
        public float device_scale_factor;
        public int depth;
        public int depth_per_component;
        public int is_monochrome;
        public Rect rect;
        public Rect available_rect;
        public ScreenInfo() {
          super(RUNTIME);
        }
        public ScreenInfo(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:MenuId).</em>
     * 
     * === Options:
     * BACK ::
     *   Navigation.
     * FORWARD ::
     *   
     * RELOAD ::
     *   
     * RELOAD_NOCACHE ::
     *   
     * STOPLOAD ::
     *   
     * UNDO ::
     *   Editing.
     * REDO ::
     *   
     * CUT ::
     *   
     * COPY ::
     *   
     * PASTE ::
     *   
     * DELETE ::
     *   
     * SELECT_ALL ::
     *   
     * FIND ::
     *   Miscellaneous.
     * PRINT ::
     *   
     * VIEW_SOURCE ::
     *   
     * SPELLCHECK_SUGGESTION_0 ::
     *   Spell checking word correction suggestions.
     * SPELLCHECK_SUGGESTION_1 ::
     *   
     * SPELLCHECK_SUGGESTION_2 ::
     *   
     * SPELLCHECK_SUGGESTION_3 ::
     *   
     * SPELLCHECK_SUGGESTION_4 ::
     *   
     * SPELLCHECK_SUGGESTION_LAST ::
     *   
     * NO_SPELLING_SUGGESTIONS ::
     *   
     * ADD_TO_DICTIONARY ::
     *   
     * CUSTOM_FIRST ::
     *   plugin placeholder menu items or Flash menu items.
     * CUSTOM_LAST ::
     *   
     * USER_FIRST ::
     *   defined in the tools/gritsettings/resource_ids file.
     * USER_LAST ::
     *   
     * 
     * @method _enum_MenuId_
     * @return [Symbol]
     * @scope class
     */
    public enum MenuId implements EnumMapper.IntegerEnum {
        BACK(Long.valueOf(100L).intValue()),
        FORWARD(Long.valueOf(101L).intValue()),
        RELOAD(Long.valueOf(102L).intValue()),
        RELOAD_NOCACHE(Long.valueOf(103L).intValue()),
        STOPLOAD(Long.valueOf(104L).intValue()),
        UNDO(Long.valueOf(110L).intValue()),
        REDO(Long.valueOf(111L).intValue()),
        CUT(Long.valueOf(112L).intValue()),
        COPY(Long.valueOf(113L).intValue()),
        PASTE(Long.valueOf(114L).intValue()),
        DELETE(Long.valueOf(115L).intValue()),
        SELECT_ALL(Long.valueOf(116L).intValue()),
        FIND(Long.valueOf(130L).intValue()),
        PRINT(Long.valueOf(131L).intValue()),
        VIEW_SOURCE(Long.valueOf(132L).intValue()),
        SPELLCHECK_SUGGESTION_0(Long.valueOf(200L).intValue()),
        SPELLCHECK_SUGGESTION_1(Long.valueOf(201L).intValue()),
        SPELLCHECK_SUGGESTION_2(Long.valueOf(202L).intValue()),
        SPELLCHECK_SUGGESTION_3(Long.valueOf(203L).intValue()),
        SPELLCHECK_SUGGESTION_4(Long.valueOf(204L).intValue()),
        SPELLCHECK_SUGGESTION_LAST(Long.valueOf(204L).intValue()),
        NO_SPELLING_SUGGESTIONS(Long.valueOf(205L).intValue()),
        ADD_TO_DICTIONARY(Long.valueOf(206L).intValue()),
        CUSTOM_FIRST(Long.valueOf(220L).intValue()),
        CUSTOM_LAST(Long.valueOf(250L).intValue()),
        USER_FIRST(Long.valueOf(26500L).intValue()),
        USER_LAST(Long.valueOf(28500L).intValue())
        ;
        
        private int nativeInt;
        
        private MenuId(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:MouseButtonType).</em>
     * 
     * === Options:
     * MBT_LEFT ::
     *   
     * MBT_MIDDLE ::
     *   
     * MBT_RIGHT ::
     *   
     * 
     * @method _enum_MouseButtonType_
     * @return [Symbol]
     * @scope class
     */
    public enum MouseButtonType implements EnumMapper.IntegerEnum {
        MBT_LEFT(Long.valueOf(0L).intValue()),
        MBT_MIDDLE(Long.valueOf(1L).intValue()),
        MBT_RIGHT(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private MouseButtonType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :x ::
     *   (Integer) X coordinate relative to the left side of the view.
     * :y ::
     *   (Integer) Y coordinate relative to the top side of the view.
     * :modifiers ::
     *   (Integer) Bit flags describing any pressed modifier keys. See
     *   cef_event_flags_t for values.
     */
    public static final class MouseEvent extends Struct {
        public int x;
        public int y;
        public int modifiers;
        public MouseEvent() {
          super(RUNTIME);
        }
        public MouseEvent(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:PaintElementType).</em>
     * 
     * === Options:
     * PET_VIEW ::
     *   
     * PET_POPUP ::
     *   
     * 
     * @method _enum_PaintElementType_
     * @return [Symbol]
     * @scope class
     */
    public enum PaintElementType implements EnumMapper.IntegerEnum {
        PET_VIEW(Long.valueOf(0L).intValue()),
        PET_POPUP(Long.valueOf(1L).intValue())
        ;
        
        private int nativeInt;
        
        private PaintElementType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:EventFlags).</em>
     * 
     * === Options:
     * EVENTFLAG_NONE ::
     *   
     * EVENTFLAG_CAPS_LOCK_ON ::
     *   
     * EVENTFLAG_SHIFT_DOWN ::
     *   
     * EVENTFLAG_CONTROL_DOWN ::
     *   
     * EVENTFLAG_ALT_DOWN ::
     *   
     * EVENTFLAG_LEFT_MOUSE_BUTTON ::
     *   
     * EVENTFLAG_MIDDLE_MOUSE_BUTTON ::
     *   
     * EVENTFLAG_RIGHT_MOUSE_BUTTON ::
     *   
     * EVENTFLAG_COMMAND_DOWN ::
     *   Mac OS-X command key.
     * EVENTFLAG_NUM_LOCK_ON ::
     *   
     * EVENTFLAG_IS_KEY_PAD ::
     *   
     * EVENTFLAG_IS_LEFT ::
     *   
     * EVENTFLAG_IS_RIGHT ::
     *   
     * 
     * @method _enum_EventFlags_
     * @return [Symbol]
     * @scope class
     */
    public enum EventFlags implements EnumMapper.IntegerEnum {
        EVENTFLAG_NONE(Long.valueOf(0L).intValue()),
        EVENTFLAG_CAPS_LOCK_ON(Long.valueOf(1L).intValue()),
        EVENTFLAG_SHIFT_DOWN(Long.valueOf(2L).intValue()),
        EVENTFLAG_CONTROL_DOWN(Long.valueOf(4L).intValue()),
        EVENTFLAG_ALT_DOWN(Long.valueOf(8L).intValue()),
        EVENTFLAG_LEFT_MOUSE_BUTTON(Long.valueOf(16L).intValue()),
        EVENTFLAG_MIDDLE_MOUSE_BUTTON(Long.valueOf(32L).intValue()),
        EVENTFLAG_RIGHT_MOUSE_BUTTON(Long.valueOf(64L).intValue()),
        EVENTFLAG_COMMAND_DOWN(Long.valueOf(128L).intValue()),
        EVENTFLAG_NUM_LOCK_ON(Long.valueOf(256L).intValue()),
        EVENTFLAG_IS_KEY_PAD(Long.valueOf(512L).intValue()),
        EVENTFLAG_IS_LEFT(Long.valueOf(1024L).intValue()),
        EVENTFLAG_IS_RIGHT(Long.valueOf(2048L).intValue())
        ;
        
        private int nativeInt;
        
        private EventFlags(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:MenuItemType).</em>
     * 
     * === Options:
     * MENUITEMTYPE_NONE ::
     *   
     * MENUITEMTYPE_COMMAND ::
     *   
     * MENUITEMTYPE_CHECK ::
     *   
     * MENUITEMTYPE_RADIO ::
     *   
     * MENUITEMTYPE_SEPARATOR ::
     *   
     * MENUITEMTYPE_SUBMENU ::
     *   
     * 
     * @method _enum_MenuItemType_
     * @return [Symbol]
     * @scope class
     */
    public enum MenuItemType implements EnumMapper.IntegerEnum {
        MENUITEMTYPE_NONE(Long.valueOf(0L).intValue()),
        MENUITEMTYPE_COMMAND(Long.valueOf(1L).intValue()),
        MENUITEMTYPE_CHECK(Long.valueOf(2L).intValue()),
        MENUITEMTYPE_RADIO(Long.valueOf(3L).intValue()),
        MENUITEMTYPE_SEPARATOR(Long.valueOf(4L).intValue()),
        MENUITEMTYPE_SUBMENU(Long.valueOf(5L).intValue())
        ;
        
        private int nativeInt;
        
        private MenuItemType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ContextMenuTypeFlags).</em>
     * 
     * === Options:
     * CM_TYPEFLAG_NONE ::
     *   No node is selected.
     * CM_TYPEFLAG_PAGE ::
     *   The top page is selected.
     * CM_TYPEFLAG_FRAME ::
     *   A subframe page is selected.
     * CM_TYPEFLAG_LINK ::
     *   A link is selected.
     * CM_TYPEFLAG_MEDIA ::
     *   A media node is selected.
     * CM_TYPEFLAG_SELECTION ::
     *   There is a textual or mixed selection that is selected.
     * CM_TYPEFLAG_EDITABLE ::
     *   An editable element is selected.
     * 
     * @method _enum_ContextMenuTypeFlags_
     * @return [Symbol]
     * @scope class
     */
    public enum ContextMenuTypeFlags implements EnumMapper.IntegerEnum {
        CM_TYPEFLAG_NONE(Long.valueOf(0L).intValue()),
        CM_TYPEFLAG_PAGE(Long.valueOf(1L).intValue()),
        CM_TYPEFLAG_FRAME(Long.valueOf(2L).intValue()),
        CM_TYPEFLAG_LINK(Long.valueOf(4L).intValue()),
        CM_TYPEFLAG_MEDIA(Long.valueOf(8L).intValue()),
        CM_TYPEFLAG_SELECTION(Long.valueOf(16L).intValue()),
        CM_TYPEFLAG_EDITABLE(Long.valueOf(32L).intValue())
        ;
        
        private int nativeInt;
        
        private ContextMenuTypeFlags(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ContextMenuMediaType).</em>
     * 
     * === Options:
     * CM_MEDIATYPE_NONE ::
     *   No special node is in context.
     * CM_MEDIATYPE_IMAGE ::
     *   An image node is selected.
     * CM_MEDIATYPE_VIDEO ::
     *   A video node is selected.
     * CM_MEDIATYPE_AUDIO ::
     *   An audio node is selected.
     * CM_MEDIATYPE_FILE ::
     *   A file node is selected.
     * CM_MEDIATYPE_PLUGIN ::
     *   A plugin node is selected.
     * 
     * @method _enum_ContextMenuMediaType_
     * @return [Symbol]
     * @scope class
     */
    public enum ContextMenuMediaType implements EnumMapper.IntegerEnum {
        CM_MEDIATYPE_NONE(Long.valueOf(0L).intValue()),
        CM_MEDIATYPE_IMAGE(Long.valueOf(1L).intValue()),
        CM_MEDIATYPE_VIDEO(Long.valueOf(2L).intValue()),
        CM_MEDIATYPE_AUDIO(Long.valueOf(3L).intValue()),
        CM_MEDIATYPE_FILE(Long.valueOf(4L).intValue()),
        CM_MEDIATYPE_PLUGIN(Long.valueOf(5L).intValue())
        ;
        
        private int nativeInt;
        
        private ContextMenuMediaType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ContextMenuMediaStateFlags).</em>
     * 
     * === Options:
     * CM_MEDIAFLAG_NONE ::
     *   
     * CM_MEDIAFLAG_ERROR ::
     *   
     * CM_MEDIAFLAG_PAUSED ::
     *   
     * CM_MEDIAFLAG_MUTED ::
     *   
     * CM_MEDIAFLAG_LOOP ::
     *   
     * CM_MEDIAFLAG_CAN_SAVE ::
     *   
     * CM_MEDIAFLAG_HAS_AUDIO ::
     *   
     * CM_MEDIAFLAG_HAS_VIDEO ::
     *   
     * CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT ::
     *   
     * CM_MEDIAFLAG_CAN_PRINT ::
     *   
     * CM_MEDIAFLAG_CAN_ROTATE ::
     *   
     * 
     * @method _enum_ContextMenuMediaStateFlags_
     * @return [Symbol]
     * @scope class
     */
    public enum ContextMenuMediaStateFlags implements EnumMapper.IntegerEnum {
        CM_MEDIAFLAG_NONE(Long.valueOf(0L).intValue()),
        CM_MEDIAFLAG_ERROR(Long.valueOf(1L).intValue()),
        CM_MEDIAFLAG_PAUSED(Long.valueOf(2L).intValue()),
        CM_MEDIAFLAG_MUTED(Long.valueOf(4L).intValue()),
        CM_MEDIAFLAG_LOOP(Long.valueOf(8L).intValue()),
        CM_MEDIAFLAG_CAN_SAVE(Long.valueOf(16L).intValue()),
        CM_MEDIAFLAG_HAS_AUDIO(Long.valueOf(32L).intValue()),
        CM_MEDIAFLAG_HAS_VIDEO(Long.valueOf(64L).intValue()),
        CM_MEDIAFLAG_CONTROL_ROOT_ELEMENT(Long.valueOf(128L).intValue()),
        CM_MEDIAFLAG_CAN_PRINT(Long.valueOf(256L).intValue()),
        CM_MEDIAFLAG_CAN_ROTATE(Long.valueOf(512L).intValue())
        ;
        
        private int nativeInt;
        
        private ContextMenuMediaStateFlags(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ContextMenuEditStateFlags).</em>
     * 
     * === Options:
     * CM_EDITFLAG_NONE ::
     *   
     * CM_EDITFLAG_CAN_UNDO ::
     *   
     * CM_EDITFLAG_CAN_REDO ::
     *   
     * CM_EDITFLAG_CAN_CUT ::
     *   
     * CM_EDITFLAG_CAN_COPY ::
     *   
     * CM_EDITFLAG_CAN_PASTE ::
     *   
     * CM_EDITFLAG_CAN_DELETE ::
     *   
     * CM_EDITFLAG_CAN_SELECT_ALL ::
     *   
     * CM_EDITFLAG_CAN_TRANSLATE ::
     *   
     * 
     * @method _enum_ContextMenuEditStateFlags_
     * @return [Symbol]
     * @scope class
     */
    public enum ContextMenuEditStateFlags implements EnumMapper.IntegerEnum {
        CM_EDITFLAG_NONE(Long.valueOf(0L).intValue()),
        CM_EDITFLAG_CAN_UNDO(Long.valueOf(1L).intValue()),
        CM_EDITFLAG_CAN_REDO(Long.valueOf(2L).intValue()),
        CM_EDITFLAG_CAN_CUT(Long.valueOf(4L).intValue()),
        CM_EDITFLAG_CAN_COPY(Long.valueOf(8L).intValue()),
        CM_EDITFLAG_CAN_PASTE(Long.valueOf(16L).intValue()),
        CM_EDITFLAG_CAN_DELETE(Long.valueOf(32L).intValue()),
        CM_EDITFLAG_CAN_SELECT_ALL(Long.valueOf(64L).intValue()),
        CM_EDITFLAG_CAN_TRANSLATE(Long.valueOf(128L).intValue())
        ;
        
        private int nativeInt;
        
        private ContextMenuEditStateFlags(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:KeyEventType).</em>
     * 
     * === Options:
     * KEYEVENT_RAWKEYDOWN ::
     *   Notification that a key transitioned from "up" to "down".
     * KEYEVENT_KEYDOWN ::
     *   Notification that a key was pressed. This does not necessarily correspond
     *   to a character depending on the key and language. Use KEYEVENT_CHAR for
     *   character input.
     * KEYEVENT_KEYUP ::
     *   Notification that a key was released.
     * KEYEVENT_CHAR ::
     *   Notification that a character was typed. Use this for text input. Key
     *   down events may generate 0, 1, or more than one character event depending
     *   on the key, locale, and operating system.
     * 
     * @method _enum_KeyEventType_
     * @return [Symbol]
     * @scope class
     */
    public enum KeyEventType implements EnumMapper.IntegerEnum {
        KEYEVENT_RAWKEYDOWN(Long.valueOf(0L).intValue()),
        KEYEVENT_KEYDOWN(Long.valueOf(1L).intValue()),
        KEYEVENT_KEYUP(Long.valueOf(2L).intValue()),
        KEYEVENT_CHAR(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private KeyEventType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :type ::
     *   (Symbol from _enum_KeyEventType_) The type of keyboard event.
     * :modifiers ::
     *   (Integer) Bit flags describing any pressed modifier keys. See
     *   cef_event_flags_t for values.
     * :windowsKeyCode ::
     *   (Integer) The Windows key code for the key event. This value is used by the DOM
     *   specification. Sometimes it comes directly from the event (i.e. on
     *   Windows) and sometimes it's determined using a mapping function. See
     *   WebCore/platform/chromium/KeyboardCodes.h for the list of values.
     * :nativeKeyCode ::
     *   (Integer) The actual key code genenerated by the platform.
     * :isSystemKey ::
     *   (Integer) Indicates whether the event is considered a "system key" event (see
     *   http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
     *   This value will always be false on non-Windows platforms.
     * :character ::
     *   (Integer) The character generated by the keystroke.
     * :unmodifiedCharacter ::
     *   (Integer) Same as |character| but unmodified by any concurrently-held modifiers
     *   (except shift). This is useful for working out shortcut keys.
     * :focusOnEditableField ::
     *   (Integer) True if the focus is currently on an editable field on the page. This is
     *   useful for determining if standard key events should be intercepted.
     */
    public static final class KeyEvent extends Struct {
        public KeyEventType type;
        public int modifiers;
        public int windows_key_code;
        public int native_key_code;
        public int is_system_key;
        public short character;
        public short unmodified_character;
        public int focus_on_editable_field;
        public KeyEvent() {
          super(RUNTIME);
        }
        public KeyEvent(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:FocusSource).</em>
     * 
     * === Options:
     * NAVIGATION ::
     *   The source is explicit navigation via the API (LoadURL(), etc).
     * SYSTEM ::
     *   The source is a system-generated focus event.
     * 
     * @method _enum_FocusSource_
     * @return [Symbol]
     * @scope class
     */
    public enum FocusSource implements EnumMapper.IntegerEnum {
        NAVIGATION(Long.valueOf(0L).intValue()),
        SYSTEM(Long.valueOf(1L).intValue())
        ;
        
        private int nativeInt;
        
        private FocusSource(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:NavigationType).</em>
     * 
     * === Options:
     * LINK_CLICKED ::
     *   
     * FORM_SUBMITTED ::
     *   
     * BACK_FORWARD ::
     *   
     * RELOAD ::
     *   
     * FORM_RESUBMITTED ::
     *   
     * OTHER ::
     *   
     * 
     * @method _enum_NavigationType_
     * @return [Symbol]
     * @scope class
     */
    public enum NavigationType implements EnumMapper.IntegerEnum {
        LINK_CLICKED(Long.valueOf(0L).intValue()),
        FORM_SUBMITTED(Long.valueOf(1L).intValue()),
        BACK_FORWARD(Long.valueOf(2L).intValue()),
        RELOAD(Long.valueOf(3L).intValue()),
        FORM_RESUBMITTED(Long.valueOf(4L).intValue()),
        OTHER(Long.valueOf(5L).intValue())
        ;
        
        private int nativeInt;
        
        private NavigationType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:XmlEncodingType).</em>
     * 
     * === Options:
     * NONE ::
     *   
     * UTF8 ::
     *   
     * UTF16LE ::
     *   
     * UTF16BE ::
     *   
     * ASCII ::
     *   
     * 
     * @method _enum_XmlEncodingType_
     * @return [Symbol]
     * @scope class
     */
    public enum XmlEncodingType implements EnumMapper.IntegerEnum {
        NONE(Long.valueOf(0L).intValue()),
        UTF8(Long.valueOf(1L).intValue()),
        UTF16LE(Long.valueOf(2L).intValue()),
        UTF16BE(Long.valueOf(3L).intValue()),
        ASCII(Long.valueOf(4L).intValue())
        ;
        
        private int nativeInt;
        
        private XmlEncodingType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:XmlNodeType).</em>
     * 
     * === Options:
     * UNSUPPORTED ::
     *   
     * PROCESSING_INSTRUCTION ::
     *   
     * DOCUMENT_TYPE ::
     *   
     * ELEMENT_START ::
     *   
     * ELEMENT_END ::
     *   
     * ATTRIBUTE ::
     *   
     * TEXT ::
     *   
     * CDATA ::
     *   
     * ENTITY_REFERENCE ::
     *   
     * WHITESPACE ::
     *   
     * COMMENT ::
     *   
     * 
     * @method _enum_XmlNodeType_
     * @return [Symbol]
     * @scope class
     */
    public enum XmlNodeType implements EnumMapper.IntegerEnum {
        UNSUPPORTED(Long.valueOf(0L).intValue()),
        PROCESSING_INSTRUCTION(Long.valueOf(1L).intValue()),
        DOCUMENT_TYPE(Long.valueOf(2L).intValue()),
        ELEMENT_START(Long.valueOf(3L).intValue()),
        ELEMENT_END(Long.valueOf(4L).intValue()),
        ATTRIBUTE(Long.valueOf(5L).intValue()),
        TEXT(Long.valueOf(6L).intValue()),
        CDATA(Long.valueOf(7L).intValue()),
        ENTITY_REFERENCE(Long.valueOf(8L).intValue()),
        WHITESPACE(Long.valueOf(9L).intValue()),
        COMMENT(Long.valueOf(10L).intValue())
        ;
        
        private int nativeInt;
        
        private XmlNodeType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :x ::
     *   (Integer) 
     * :xSet ::
     *   (Integer) 
     * :y ::
     *   (Integer) 
     * :ySet ::
     *   (Integer) 
     * :width ::
     *   (Integer) 
     * :widthSet ::
     *   (Integer) 
     * :height ::
     *   (Integer) 
     * :heightSet ::
     *   (Integer) 
     * :menuBarVisible ::
     *   (Integer) 
     * :statusBarVisible ::
     *   (Integer) 
     * :toolBarVisible ::
     *   (Integer) 
     * :locationBarVisible ::
     *   (Integer) 
     * :scrollbarsVisible ::
     *   (Integer) 
     * :resizable ::
     *   (Integer) 
     * :fullscreen ::
     *   (Integer) 
     * :dialog ::
     *   (Integer) 
     * :additionalFeatures ::
     *   (FFI::Pointer(StringList)) 
     */
    public static final class PopupFeatures extends Struct {
        public int x;
        public int xSet;
        public int y;
        public int ySet;
        public int width;
        public int widthSet;
        public int height;
        public int heightSet;
        public int menuBarVisible;
        public int statusBarVisible;
        public int toolBarVisible;
        public int locationBarVisible;
        public int scrollbarsVisible;
        public int resizable;
        public int fullscreen;
        public int dialog;
        public Pointer additionalFeatures;
        public PopupFeatures() {
          super(RUNTIME);
        }
        public PopupFeatures(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:DomDocumentType).</em>
     * 
     * === Options:
     * UNKNOWN ::
     *   
     * HTML ::
     *   
     * XHTML ::
     *   
     * PLUGIN ::
     *   
     * 
     * @method _enum_DomDocumentType_
     * @return [Symbol]
     * @scope class
     */
    public enum DomDocumentType implements EnumMapper.IntegerEnum {
        UNKNOWN(Long.valueOf(0L).intValue()),
        HTML(Long.valueOf(1L).intValue()),
        XHTML(Long.valueOf(2L).intValue()),
        PLUGIN(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private DomDocumentType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:DomEventCategory).</em>
     * 
     * === Options:
     * UNKNOWN ::
     *   
     * UI ::
     *   
     * MOUSE ::
     *   
     * MUTATION ::
     *   
     * KEYBOARD ::
     *   
     * TEXT ::
     *   
     * COMPOSITION ::
     *   
     * DRAG ::
     *   
     * CLIPBOARD ::
     *   
     * MESSAGE ::
     *   
     * WHEEL ::
     *   
     * BEFORE_TEXT_INSERTED ::
     *   
     * OVERFLOW ::
     *   
     * PAGE_TRANSITION ::
     *   
     * POPSTATE ::
     *   
     * PROGRESS ::
     *   
     * XMLHTTPREQUEST_PROGRESS ::
     *   
     * 
     * @method _enum_DomEventCategory_
     * @return [Symbol]
     * @scope class
     */
    public enum DomEventCategory implements EnumMapper.IntegerEnum {
        UNKNOWN(Long.valueOf(0L).intValue()),
        UI(Long.valueOf(1L).intValue()),
        MOUSE(Long.valueOf(2L).intValue()),
        MUTATION(Long.valueOf(4L).intValue()),
        KEYBOARD(Long.valueOf(8L).intValue()),
        TEXT(Long.valueOf(16L).intValue()),
        COMPOSITION(Long.valueOf(32L).intValue()),
        DRAG(Long.valueOf(64L).intValue()),
        CLIPBOARD(Long.valueOf(128L).intValue()),
        MESSAGE(Long.valueOf(256L).intValue()),
        WHEEL(Long.valueOf(512L).intValue()),
        BEFORE_TEXT_INSERTED(Long.valueOf(1024L).intValue()),
        OVERFLOW(Long.valueOf(2048L).intValue()),
        PAGE_TRANSITION(Long.valueOf(4096L).intValue()),
        POPSTATE(Long.valueOf(8192L).intValue()),
        PROGRESS(Long.valueOf(16384L).intValue()),
        XMLHTTPREQUEST_PROGRESS(Long.valueOf(32768L).intValue())
        ;
        
        private int nativeInt;
        
        private DomEventCategory(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:DomEventPhase).</em>
     * 
     * === Options:
     * UNKNOWN ::
     *   
     * CAPTURING ::
     *   
     * AT_TARGET ::
     *   
     * BUBBLING ::
     *   
     * 
     * @method _enum_DomEventPhase_
     * @return [Symbol]
     * @scope class
     */
    public enum DomEventPhase implements EnumMapper.IntegerEnum {
        UNKNOWN(Long.valueOf(0L).intValue()),
        CAPTURING(Long.valueOf(1L).intValue()),
        AT_TARGET(Long.valueOf(2L).intValue()),
        BUBBLING(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private DomEventPhase(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:DomNodeType).</em>
     * 
     * === Options:
     * UNSUPPORTED ::
     *   
     * ELEMENT ::
     *   
     * ATTRIBUTE ::
     *   
     * TEXT ::
     *   
     * CDATA_SECTION ::
     *   
     * PROCESSING_INSTRUCTIONS ::
     *   
     * COMMENT ::
     *   
     * DOCUMENT ::
     *   
     * DOCUMENT_TYPE ::
     *   
     * DOCUMENT_FRAGMENT ::
     *   
     * 
     * @method _enum_DomNodeType_
     * @return [Symbol]
     * @scope class
     */
    public enum DomNodeType implements EnumMapper.IntegerEnum {
        UNSUPPORTED(Long.valueOf(0L).intValue()),
        ELEMENT(Long.valueOf(1L).intValue()),
        ATTRIBUTE(Long.valueOf(2L).intValue()),
        TEXT(Long.valueOf(3L).intValue()),
        CDATA_SECTION(Long.valueOf(4L).intValue()),
        PROCESSING_INSTRUCTIONS(Long.valueOf(5L).intValue()),
        COMMENT(Long.valueOf(6L).intValue()),
        DOCUMENT(Long.valueOf(7L).intValue()),
        DOCUMENT_TYPE(Long.valueOf(8L).intValue()),
        DOCUMENT_FRAGMENT(Long.valueOf(9L).intValue())
        ;
        
        private int nativeInt;
        
        private DomNodeType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:FileDialogMode).</em>
     * 
     * === Options:
     * OPEN ::
     *   Requires that the file exists before allowing the user to pick it.
     * OPEN_MULTIPLE ::
     *   Like Open, but allows picking multiple files to open.
     * OPEN_FOLDER ::
     *   Like Open, but selects a folder to open.
     * SAVE ::
     *   Allows picking a nonexistent file, and prompts to overwrite if the file
     *   already exists.
     * TYPE_MASK ::
     *   General mask defining the bits used for the type values.
     * OVERWRITEPROMPT_FLAG ::
     *   Prompt to overwrite if the user selects an existing file with the Save
     *   dialog.
     * HIDEREADONLY_FLAG ::
     *   Do not display read-only files.
     * 
     * @method _enum_FileDialogMode_
     * @return [Symbol]
     * @scope class
     */
    public enum FileDialogMode implements EnumMapper.IntegerEnum {
        OPEN(Long.valueOf(0L).intValue()),
        OPEN_MULTIPLE(Long.valueOf(1L).intValue()),
        OPEN_FOLDER(Long.valueOf(2L).intValue()),
        SAVE(Long.valueOf(3L).intValue()),
        TYPE_MASK(Long.valueOf(255L).intValue()),
        OVERWRITEPROMPT_FLAG(Long.valueOf(16777216L).intValue()),
        HIDEREADONLY_FLAG(Long.valueOf(33554432L).intValue())
        ;
        
        private int nativeInt;
        
        private FileDialogMode(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:GeopositionErrorCode).</em>
     * 
     * === Options:
     * GEOPOSITON_ERROR_NONE ::
     *   
     * GEOPOSITON_ERROR_PERMISSION_DENIED ::
     *   
     * GEOPOSITON_ERROR_POSITION_UNAVAILABLE ::
     *   
     * GEOPOSITON_ERROR_TIMEOUT ::
     *   
     * 
     * @method _enum_GeopositionErrorCode_
     * @return [Symbol]
     * @scope class
     */
    public enum GeopositionErrorCode implements EnumMapper.IntegerEnum {
        GEOPOSITON_ERROR_NONE(Long.valueOf(0L).intValue()),
        GEOPOSITON_ERROR_PERMISSION_DENIED(Long.valueOf(1L).intValue()),
        GEOPOSITON_ERROR_POSITION_UNAVAILABLE(Long.valueOf(2L).intValue()),
        GEOPOSITON_ERROR_TIMEOUT(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private GeopositionErrorCode(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :latitude ::
     *   (Float) Latitude in decimal degrees north (WGS84 coordinate frame).
     * :longitude ::
     *   (Float) Longitude in decimal degrees west (WGS84 coordinate frame).
     * :altitude ::
     *   (Float) Altitude in meters (above WGS84 datum).
     * :accuracy ::
     *   (Float) Accuracy of horizontal position in meters.
     * :altitudeAccuracy ::
     *   (Float) Accuracy of altitude in meters.
     * :heading ::
     *   (Float) Heading in decimal degrees clockwise from true north.
     * :speed ::
     *   (Float) Horizontal component of device velocity in meters per second.
     * :timestamp ::
     *   (unknown) Time of position measurement in milliseconds since Epoch in UTC time. This
     *   is taken from the host computer's system clock.
     * :errorCode ::
     *   (Symbol from _enum_GeopositionErrorCode_) Error code, see enum above.
     * :errorMessage ::
     *   (unknown) Human-readable error message.
     */
    public static final class Geoposition extends Struct {
        public double latitude;
        public double longitude;
        public double altitude;
        public double accuracy;
        public double altitude_accuracy;
        public double heading;
        public double speed;
        public byte timestamp;
        public GeopositionErrorCode error_code;
        public byte error_message;
        public Geoposition() {
          super(RUNTIME);
        }
        public Geoposition(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ColorModel).</em>
     * 
     * === Options:
     * UNKNOWN ::
     *   
     * GRAY ::
     *   
     * COLOR ::
     *   
     * CMYK ::
     *   
     * CMY ::
     *   
     * KCMY ::
     *   
     * CMY_K ::
     *   
     * BLACK ::
     *   CMY_K represents CMY+K.
     * GRAYSCALE ::
     *   
     * RGB ::
     *   
     * RGB16 ::
     *   
     * RGBA ::
     *   
     * COLORMODE_COLOR ::
     *   
     * COLORMODE_MONOCHROME ::
     *   Used in samsung printer ppds.
     * HP_COLOR_COLOR ::
     *   Used in samsung printer ppds.
     * HP_COLOR_BLACK ::
     *   Used in HP color printer ppds.
     * PRINTOUTMODE_NORMAL ::
     *   Used in HP color printer ppds.
     * PRINTOUTMODE_NORMAL_GRAY ::
     *   Used in foomatic ppds.
     * PROCESSCOLORMODEL_CMYK ::
     *   Used in foomatic ppds.
     * PROCESSCOLORMODEL_GREYSCALE ::
     *   Used in canon printer ppds.
     * PROCESSCOLORMODEL_RGB ::
     *   Used in canon printer ppds.
     * 
     * @method _enum_ColorModel_
     * @return [Symbol]
     * @scope class
     */
    public enum ColorModel implements EnumMapper.IntegerEnum {
        UNKNOWN(Long.valueOf(0L).intValue()),
        GRAY(Long.valueOf(1L).intValue()),
        COLOR(Long.valueOf(2L).intValue()),
        CMYK(Long.valueOf(3L).intValue()),
        CMY(Long.valueOf(4L).intValue()),
        KCMY(Long.valueOf(5L).intValue()),
        CMY_K(Long.valueOf(6L).intValue()),
        BLACK(Long.valueOf(7L).intValue()),
        GRAYSCALE(Long.valueOf(8L).intValue()),
        RGB(Long.valueOf(9L).intValue()),
        RGB16(Long.valueOf(10L).intValue()),
        RGBA(Long.valueOf(11L).intValue()),
        COLORMODE_COLOR(Long.valueOf(12L).intValue()),
        COLORMODE_MONOCHROME(Long.valueOf(13L).intValue()),
        HP_COLOR_COLOR(Long.valueOf(14L).intValue()),
        HP_COLOR_BLACK(Long.valueOf(15L).intValue()),
        PRINTOUTMODE_NORMAL(Long.valueOf(16L).intValue()),
        PRINTOUTMODE_NORMAL_GRAY(Long.valueOf(17L).intValue()),
        PROCESSCOLORMODEL_CMYK(Long.valueOf(18L).intValue()),
        PROCESSCOLORMODEL_GREYSCALE(Long.valueOf(19L).intValue()),
        PROCESSCOLORMODEL_RGB(Long.valueOf(20L).intValue())
        ;
        
        private int nativeInt;
        
        private ColorModel(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:DuplexMode).</em>
     * 
     * === Options:
     * UNKNOWN ::
     *   
     * SIMPLEX ::
     *   
     * LONG_EDGE ::
     *   
     * SHORT_EDGE ::
     *   
     * 
     * @method _enum_DuplexMode_
     * @return [Symbol]
     * @scope class
     */
    public enum DuplexMode implements EnumMapper.IntegerEnum {
        UNKNOWN(Long.valueOf(-1L).intValue()),
        SIMPLEX(Long.valueOf(0L).intValue()),
        LONG_EDGE(Long.valueOf(1L).intValue()),
        SHORT_EDGE(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private DuplexMode(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:CursorType).</em>
     * 
     * === Options:
     * CT_POINTER ::
     *   
     * CT_CROSS ::
     *   
     * CT_HAND ::
     *   
     * CT_IBEAM ::
     *   
     * CT_WAIT ::
     *   
     * CT_HELP ::
     *   
     * CT_EASTRESIZE ::
     *   
     * CT_NORTHRESIZE ::
     *   
     * CT_NORTHEASTRESIZE ::
     *   
     * CT_NORTHWESTRESIZE ::
     *   
     * CT_SOUTHRESIZE ::
     *   
     * CT_SOUTHEASTRESIZE ::
     *   
     * CT_SOUTHWESTRESIZE ::
     *   
     * CT_WESTRESIZE ::
     *   
     * CT_NORTHSOUTHRESIZE ::
     *   
     * CT_EASTWESTRESIZE ::
     *   
     * CT_NORTHEASTSOUTHWESTRESIZE ::
     *   
     * CT_NORTHWESTSOUTHEASTRESIZE ::
     *   
     * CT_COLUMNRESIZE ::
     *   
     * CT_ROWRESIZE ::
     *   
     * CT_MIDDLEPANNING ::
     *   
     * CT_EASTPANNING ::
     *   
     * CT_NORTHPANNING ::
     *   
     * CT_NORTHEASTPANNING ::
     *   
     * CT_NORTHWESTPANNING ::
     *   
     * CT_SOUTHPANNING ::
     *   
     * CT_SOUTHEASTPANNING ::
     *   
     * CT_SOUTHWESTPANNING ::
     *   
     * CT_WESTPANNING ::
     *   
     * CT_MOVE ::
     *   
     * CT_VERTICALTEXT ::
     *   
     * CT_CELL ::
     *   
     * CT_CONTEXTMENU ::
     *   
     * CT_ALIAS ::
     *   
     * CT_PROGRESS ::
     *   
     * CT_NODROP ::
     *   
     * CT_COPY ::
     *   
     * CT_NONE ::
     *   
     * CT_NOTALLOWED ::
     *   
     * CT_ZOOMIN ::
     *   
     * CT_ZOOMOUT ::
     *   
     * CT_GRAB ::
     *   
     * CT_GRABBING ::
     *   
     * CT_CUSTOM ::
     *   
     * 
     * @method _enum_CursorType_
     * @return [Symbol]
     * @scope class
     */
    public enum CursorType implements EnumMapper.IntegerEnum {
        CT_POINTER(Long.valueOf(0L).intValue()),
        CT_CROSS(Long.valueOf(1L).intValue()),
        CT_HAND(Long.valueOf(2L).intValue()),
        CT_IBEAM(Long.valueOf(3L).intValue()),
        CT_WAIT(Long.valueOf(4L).intValue()),
        CT_HELP(Long.valueOf(5L).intValue()),
        CT_EASTRESIZE(Long.valueOf(6L).intValue()),
        CT_NORTHRESIZE(Long.valueOf(7L).intValue()),
        CT_NORTHEASTRESIZE(Long.valueOf(8L).intValue()),
        CT_NORTHWESTRESIZE(Long.valueOf(9L).intValue()),
        CT_SOUTHRESIZE(Long.valueOf(10L).intValue()),
        CT_SOUTHEASTRESIZE(Long.valueOf(11L).intValue()),
        CT_SOUTHWESTRESIZE(Long.valueOf(12L).intValue()),
        CT_WESTRESIZE(Long.valueOf(13L).intValue()),
        CT_NORTHSOUTHRESIZE(Long.valueOf(14L).intValue()),
        CT_EASTWESTRESIZE(Long.valueOf(15L).intValue()),
        CT_NORTHEASTSOUTHWESTRESIZE(Long.valueOf(16L).intValue()),
        CT_NORTHWESTSOUTHEASTRESIZE(Long.valueOf(17L).intValue()),
        CT_COLUMNRESIZE(Long.valueOf(18L).intValue()),
        CT_ROWRESIZE(Long.valueOf(19L).intValue()),
        CT_MIDDLEPANNING(Long.valueOf(20L).intValue()),
        CT_EASTPANNING(Long.valueOf(21L).intValue()),
        CT_NORTHPANNING(Long.valueOf(22L).intValue()),
        CT_NORTHEASTPANNING(Long.valueOf(23L).intValue()),
        CT_NORTHWESTPANNING(Long.valueOf(24L).intValue()),
        CT_SOUTHPANNING(Long.valueOf(25L).intValue()),
        CT_SOUTHEASTPANNING(Long.valueOf(26L).intValue()),
        CT_SOUTHWESTPANNING(Long.valueOf(27L).intValue()),
        CT_WESTPANNING(Long.valueOf(28L).intValue()),
        CT_MOVE(Long.valueOf(29L).intValue()),
        CT_VERTICALTEXT(Long.valueOf(30L).intValue()),
        CT_CELL(Long.valueOf(31L).intValue()),
        CT_CONTEXTMENU(Long.valueOf(32L).intValue()),
        CT_ALIAS(Long.valueOf(33L).intValue()),
        CT_PROGRESS(Long.valueOf(34L).intValue()),
        CT_NODROP(Long.valueOf(35L).intValue()),
        CT_COPY(Long.valueOf(36L).intValue()),
        CT_NONE(Long.valueOf(37L).intValue()),
        CT_NOTALLOWED(Long.valueOf(38L).intValue()),
        CT_ZOOMIN(Long.valueOf(39L).intValue()),
        CT_ZOOMOUT(Long.valueOf(40L).intValue()),
        CT_GRAB(Long.valueOf(41L).intValue()),
        CT_GRABBING(Long.valueOf(42L).intValue()),
        CT_CUSTOM(Long.valueOf(43L).intValue())
        ;
        
        private int nativeInt;
        
        private CursorType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :hotspot ::
     *   (Point) 
     * :imageScaleFactor ::
     *   (Float) 
     * :buffer ::
     *   (FFI::Pointer(*Void)) 
     * :size ::
     *   (Size) 
     */
    public static final class CursorInfo extends Struct {
        public Point hotspot;
        public float image_scale_factor;
        public Pointer buffer;
        public Size size;
        public CursorInfo() {
          super(RUNTIME);
        }
        public CursorInfo(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:UriUnescapeRule).</em>
     * 
     * === Options:
     * UU_NONE ::
     *   Don't unescape anything at all.
     * UU_NORMAL ::
     *   Don't unescape anything special, but all normal unescaping will happen.
     *   This is a placeholder and can't be combined with other flags (since it's
     *   just the absence of them). All other unescape rules imply "normal" in
     *   addition to their special meaning. Things like escaped letters, digits,
     *   and most symbols will get unescaped with this mode.
     * UU_SPACES ::
     *   Convert %20 to spaces. In some places where we're showing URLs, we may
     *   want this. In places where the URL may be copied and pasted out, then
     *   you wouldn't want this since it might not be interpreted in one piece
     *   by other applications.
     * UU_PATH_SEPARATORS ::
     *   Unescapes '/' and '\\'. If these characters were unescaped, the resulting
     *   URL won't be the same as the source one. Moreover, they are dangerous to
     *   unescape in strings that will be used as file paths or names. This value
     *   should only be used when slashes don't have special meaning, like data
     *   URLs.
     * UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS ::
     *   Unescapes various characters that will change the meaning of URLs,
     *   including '%', '+', '&', '#'. Does not unescape path separators.
     *   If these characters were unescaped, the resulting URL won't be the same
     *   as the source one. This flag is used when generating final output like
     *   filenames for URLs where we won't be interpreting as a URL and want to do
     *   as much unescaping as possible.
     * UU_SPOOFING_AND_CONTROL_CHARS ::
     *   Unescapes characters that can be used in spoofing attempts (such as LOCK)
     *   and control characters (such as BiDi control characters and %01).  This
     *   INCLUDES NULLs.  This is used for rare cases such as data: URL decoding
     *   where the result is binary data.
     *   
     *   DO NOT use UU_SPOOFING_AND_CONTROL_CHARS if the URL is going to be
     *   displayed in the UI for security reasons.
     * UU_REPLACE_PLUS_WITH_SPACE ::
     *   URL queries use "+" for space. This flag controls that replacement.
     * 
     * @method _enum_UriUnescapeRule_
     * @return [Symbol]
     * @scope class
     */
    public enum UriUnescapeRule implements EnumMapper.IntegerEnum {
        UU_NONE(Long.valueOf(0L).intValue()),
        UU_NORMAL(Long.valueOf(1L).intValue()),
        UU_SPACES(Long.valueOf(2L).intValue()),
        UU_PATH_SEPARATORS(Long.valueOf(4L).intValue()),
        UU_URL_SPECIAL_CHARS_EXCEPT_PATH_SEPARATORS(Long.valueOf(8L).intValue()),
        UU_SPOOFING_AND_CONTROL_CHARS(Long.valueOf(16L).intValue()),
        UU_REPLACE_PLUS_WITH_SPACE(Long.valueOf(32L).intValue())
        ;
        
        private int nativeInt;
        
        private UriUnescapeRule(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:JsonParserOptions).</em>
     * 
     * === Options:
     * RFC ::
     *   Parses the input strictly according to RFC 4627. See comments in Chromium's
     *   base/json/json_reader.h file for known limitations/deviations from the RFC.
     * ALLOW_TRAILING_COMMAS ::
     *   Allows commas to exist after the last element in structures.
     * 
     * @method _enum_JsonParserOptions_
     * @return [Symbol]
     * @scope class
     */
    public enum JsonParserOptions implements EnumMapper.IntegerEnum {
        RFC(Long.valueOf(0L).intValue()),
        ALLOW_TRAILING_COMMAS(Long.valueOf(1L).intValue())
        ;
        
        private int nativeInt;
        
        private JsonParserOptions(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:JsonParserError).</em>
     * 
     * === Options:
     * NO_ERROR ::
     *   
     * INVALID_ESCAPE ::
     *   
     * SYNTAX_ERROR ::
     *   
     * UNEXPECTED_TOKEN ::
     *   
     * TRAILING_COMMA ::
     *   
     * TOO_MUCH_NESTING ::
     *   
     * UNEXPECTED_DATA_AFTER_ROOT ::
     *   
     * UNSUPPORTED_ENCODING ::
     *   
     * UNQUOTED_DICTIONARY_KEY ::
     *   
     * PARSE_ERROR_COUNT ::
     *   
     * 
     * @method _enum_JsonParserError_
     * @return [Symbol]
     * @scope class
     */
    public enum JsonParserError implements EnumMapper.IntegerEnum {
        NO_ERROR(Long.valueOf(0L).intValue()),
        INVALID_ESCAPE(Long.valueOf(1L).intValue()),
        SYNTAX_ERROR(Long.valueOf(2L).intValue()),
        UNEXPECTED_TOKEN(Long.valueOf(3L).intValue()),
        TRAILING_COMMA(Long.valueOf(4L).intValue()),
        TOO_MUCH_NESTING(Long.valueOf(5L).intValue()),
        UNEXPECTED_DATA_AFTER_ROOT(Long.valueOf(6L).intValue()),
        UNSUPPORTED_ENCODING(Long.valueOf(7L).intValue()),
        UNQUOTED_DICTIONARY_KEY(Long.valueOf(8L).intValue()),
        PARSE_ERROR_COUNT(Long.valueOf(9L).intValue())
        ;
        
        private int nativeInt;
        
        private JsonParserError(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:JsonWriterOptions).</em>
     * 
     * === Options:
     * DEFAULT ::
     *   Default behavior.
     * OMIT_BINARY_VALUES ::
     *   This option instructs the writer that if a Binary value is encountered,
     *   the value (and key if within a dictionary) will be omitted from the
     *   output, and success will be returned. Otherwise, if a binary value is
     *   encountered, failure will be returned.
     * OMIT_DOUBLE_TYPE_PRESERVATION ::
     *   This option instructs the writer to write doubles that have no fractional
     *   part as a normal integer (i.e., without using exponential notation
     *   or appending a '.0') as long as the value is within the range of a
     *   64-bit int.
     * PRETTY_PRINT ::
     *   Return a slightly nicer formatted json string (pads with whitespace to
     *   help with readability).
     * 
     * @method _enum_JsonWriterOptions_
     * @return [Symbol]
     * @scope class
     */
    public enum JsonWriterOptions implements EnumMapper.IntegerEnum {
        DEFAULT(Long.valueOf(0L).intValue()),
        OMIT_BINARY_VALUES(Long.valueOf(1L).intValue()),
        OMIT_DOUBLE_TYPE_PRESERVATION(Long.valueOf(2L).intValue()),
        PRETTY_PRINT(Long.valueOf(4L).intValue())
        ;
        
        private int nativeInt;
        
        private JsonWriterOptions(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:PdfPrintMarginType).</em>
     * 
     * === Options:
     * DEFAULT ::
     *   Default margins.
     * NONE ::
     *   No margins.
     * MINIMUM ::
     *   Minimum margins.
     * CUSTOM ::
     *   Custom margins using the |margin_*| values from cef_pdf_print_settings_t.
     * 
     * @method _enum_PdfPrintMarginType_
     * @return [Symbol]
     * @scope class
     */
    public enum PdfPrintMarginType implements EnumMapper.IntegerEnum {
        DEFAULT(Long.valueOf(0L).intValue()),
        NONE(Long.valueOf(1L).intValue()),
        MINIMUM(Long.valueOf(2L).intValue()),
        CUSTOM(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private PdfPrintMarginType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :headerFooterTitle ::
     *   (unknown) Page title to display in the header. Only used if |header_footer_enabled|
     *   is set to true (1).
     * :headerFooterUrl ::
     *   (unknown) URL to display in the footer. Only used if |header_footer_enabled| is set
     *   to true (1).
     * :pageWidth ::
     *   (Integer) Output page size in microns. If either of these values is less than or
     *   equal to zero then the default paper size (A4) will be used.
     * :pageHeight ::
     *   (Integer) 
     * :marginTop ::
     *   (Float) Margins in millimeters. Only used if |margin_type| is set to
     *   PDF_PRINT_MARGIN_CUSTOM.
     * :marginRight ::
     *   (Float) 
     * :marginBottom ::
     *   (Float) 
     * :marginLeft ::
     *   (Float) 
     * :marginType ::
     *   (Symbol from _enum_PdfPrintMarginType_) Margin type.
     * :headerFooterEnabled ::
     *   (Integer) Set to true (1) to print headers and footers or false (0) to not print
     *   headers and footers.
     * :selectionOnly ::
     *   (Integer) Set to true (1) to print the selection only or false (0) to print all.
     * :landscape ::
     *   (Integer) Set to true (1) for landscape mode or false (0) for portrait mode.
     * :backgroundsEnabled ::
     *   (Integer) Set to true (1) to print background graphics or false (0) to not print
     *   background graphics.
     */
    public static final class PdfPrintSettings extends Struct {
        public byte header_footer_title;
        public byte header_footer_url;
        public int page_width;
        public int page_height;
        public double margin_top;
        public double margin_right;
        public double margin_bottom;
        public double margin_left;
        public PdfPrintMarginType margin_type;
        public int header_footer_enabled;
        public int selection_only;
        public int landscape;
        public int backgrounds_enabled;
        public PdfPrintSettings() {
          super(RUNTIME);
        }
        public PdfPrintSettings(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ScaleFactor).</em>
     * 
     * === Options:
     * NONE ::
     *   
     * _100P ::
     *   
     * _125P ::
     *   
     * _133P ::
     *   
     * _140P ::
     *   
     * _150P ::
     *   
     * _180P ::
     *   
     * _200P ::
     *   
     * _250P ::
     *   
     * _300P ::
     *   
     * 
     * @method _enum_ScaleFactor_
     * @return [Symbol]
     * @scope class
     */
    public enum ScaleFactor implements EnumMapper.IntegerEnum {
        NONE(Long.valueOf(0L).intValue()),
        _100P(Long.valueOf(1L).intValue()),
        _125P(Long.valueOf(2L).intValue()),
        _133P(Long.valueOf(3L).intValue()),
        _140P(Long.valueOf(4L).intValue()),
        _150P(Long.valueOf(5L).intValue()),
        _180P(Long.valueOf(6L).intValue()),
        _200P(Long.valueOf(7L).intValue()),
        _250P(Long.valueOf(8L).intValue()),
        _300P(Long.valueOf(9L).intValue())
        ;
        
        private int nativeInt;
        
        private ScaleFactor(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:PluginPolicy).</em>
     * 
     * === Options:
     * ALLOW ::
     *   Allow the content.
     * DETECT_IMPORTANT ::
     *   Allow important content and block unimportant content based on heuristics.
     *   The user can manually load blocked content.
     * BLOCK ::
     *   Block the content. The user can manually load blocked content.
     * DISABLE ::
     *   Disable the content. The user cannot load disabled content.
     * 
     * @method _enum_PluginPolicy_
     * @return [Symbol]
     * @scope class
     */
    public enum PluginPolicy implements EnumMapper.IntegerEnum {
        ALLOW(Long.valueOf(0L).intValue()),
        DETECT_IMPORTANT(Long.valueOf(1L).intValue()),
        BLOCK(Long.valueOf(2L).intValue()),
        DISABLE(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private PluginPolicy(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ReferrerPolicy).</em>
     * 
     * === Options:
     * ALWAYS ::
     *   Always send the complete Referrer value.
     * DEFAULT ::
     *   Use the default policy. This is REFERRER_POLICY_ORIGIN_WHEN_CROSS_ORIGIN
     *   when the `--reduced-referrer-granularity` command-line flag is specified
     *   and REFERRER_POLICY_NO_REFERRER_WHEN_DOWNGRADE otherwise.
     * NO_REFERRER_WHEN_DOWNGRADE ::
     *   When navigating from HTTPS to HTTP do not send the Referrer value.
     *   Otherwise, send the complete Referrer value.
     * NEVER ::
     *   Never send the Referrer value.
     * ORIGIN ::
     *   Only send the origin component of the Referrer value.
     * ORIGIN_WHEN_CROSS_ORIGIN ::
     *   When navigating cross-origin only send the origin component of the Referrer
     *   value. Otherwise, send the complete Referrer value.
     * 
     * @method _enum_ReferrerPolicy_
     * @return [Symbol]
     * @scope class
     */
    public enum ReferrerPolicy implements EnumMapper.IntegerEnum {
        ALWAYS(Long.valueOf(0L).intValue()),
        DEFAULT(Long.valueOf(1L).intValue()),
        NO_REFERRER_WHEN_DOWNGRADE(Long.valueOf(2L).intValue()),
        NEVER(Long.valueOf(3L).intValue()),
        ORIGIN(Long.valueOf(4L).intValue()),
        ORIGIN_WHEN_CROSS_ORIGIN(Long.valueOf(5L).intValue())
        ;
        
        private int nativeInt;
        
        private ReferrerPolicy(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ResponseFilterStatus).</em>
     * 
     * === Options:
     * NEED_MORE_DATA ::
     *   Some or all of the pre-filter data was read successfully but more data is
     *   needed in order to continue filtering (filtered output is pending).
     * DONE ::
     *   Some or all of the pre-filter data was read successfully and all available
     *   filtered output has been written.
     * ERROR ::
     *   An error occurred during filtering.
     * 
     * @method _enum_ResponseFilterStatus_
     * @return [Symbol]
     * @scope class
     */
    public enum ResponseFilterStatus implements EnumMapper.IntegerEnum {
        NEED_MORE_DATA(Long.valueOf(0L).intValue()),
        DONE(Long.valueOf(1L).intValue()),
        ERROR(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private ResponseFilterStatus(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ColorType).</em>
     * 
     * === Options:
     * RGBA_8888 ::
     *   RGBA with 8 bits per pixel (32bits total).
     * BGRA_8888 ::
     *   BGRA with 8 bits per pixel (32bits total).
     * 
     * @method _enum_ColorType_
     * @return [Symbol]
     * @scope class
     */
    public enum ColorType implements EnumMapper.IntegerEnum {
        RGBA_8888(Long.valueOf(0L).intValue()),
        BGRA_8888(Long.valueOf(1L).intValue())
        ;
        
        private int nativeInt;
        
        private ColorType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:AlphaType).</em>
     * 
     * === Options:
     * OPAQUE ::
     *   No transparency. The alpha component is ignored.
     * PREMULTIPLIED ::
     *   Transparency with pre-multiplied alpha component.
     * POSTMULTIPLIED ::
     *   Transparency with post-multiplied alpha component.
     * 
     * @method _enum_AlphaType_
     * @return [Symbol]
     * @scope class
     */
    public enum AlphaType implements EnumMapper.IntegerEnum {
        OPAQUE(Long.valueOf(0L).intValue()),
        PREMULTIPLIED(Long.valueOf(1L).intValue()),
        POSTMULTIPLIED(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private AlphaType(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:TextStyle).</em>
     * 
     * === Options:
     * BOLD ::
     *   
     * ITALIC ::
     *   
     * STRIKE ::
     *   
     * DIAGONAL_STRIKE ::
     *   
     * UNDERLINE ::
     *   
     * 
     * @method _enum_TextStyle_
     * @return [Symbol]
     * @scope class
     */
    public enum TextStyle implements EnumMapper.IntegerEnum {
        BOLD(Long.valueOf(0L).intValue()),
        ITALIC(Long.valueOf(1L).intValue()),
        STRIKE(Long.valueOf(2L).intValue()),
        DIAGONAL_STRIKE(Long.valueOf(3L).intValue()),
        UNDERLINE(Long.valueOf(4L).intValue())
        ;
        
        private int nativeInt;
        
        private TextStyle(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:MainAxisAlignment).</em>
     * 
     * === Options:
     * START ::
     *   Child views will be left-aligned.
     * CENTER ::
     *   Child views will be center-aligned.
     * END ::
     *   Child views will be right-aligned.
     * 
     * @method _enum_MainAxisAlignment_
     * @return [Symbol]
     * @scope class
     */
    public enum MainAxisAlignment implements EnumMapper.IntegerEnum {
        START(Long.valueOf(0L).intValue()),
        CENTER(Long.valueOf(1L).intValue()),
        END(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private MainAxisAlignment(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:CrossAxisAlignment).</em>
     * 
     * === Options:
     * STRETCH ::
     *   Child views will be stretched to fit.
     * START ::
     *   Child views will be left-aligned.
     * CENTER ::
     *   Child views will be center-aligned.
     * END ::
     *   Child views will be right-aligned.
     * 
     * @method _enum_CrossAxisAlignment_
     * @return [Symbol]
     * @scope class
     */
    public enum CrossAxisAlignment implements EnumMapper.IntegerEnum {
        STRETCH(Long.valueOf(0L).intValue()),
        START(Long.valueOf(1L).intValue()),
        CENTER(Long.valueOf(2L).intValue()),
        END(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private CrossAxisAlignment(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :horizontal ::
     *   (Integer) If true (1) the layout will be horizontal, otherwise the layout will be
     *   vertical.
     * :insideBorderHorizontalSpacing ::
     *   (Integer) Adds additional horizontal space between the child view area and the host
     *   view border.
     * :insideBorderVerticalSpacing ::
     *   (Integer) Adds additional vertical space between the child view area and the host
     *   view border.
     * :insideBorderInsets ::
     *   (Insets) Adds additional space around the child view area.
     * :betweenChildSpacing ::
     *   (Integer) Adds additional space between child views.
     * :mainAxisAlignment ::
     *   (Symbol from _enum_MainAxisAlignment_) Specifies where along the main axis the child views should be laid out.
     * :crossAxisAlignment ::
     *   (Symbol from _enum_CrossAxisAlignment_) Specifies where along the cross axis the child views should be laid out.
     * :minimumCrossAxisSize ::
     *   (Integer) Minimum cross axis size.
     * :defaultFlex ::
     *   (Integer) Default flex for views when none is specified via CefBoxLayout methods.
     *   Using the preferred size as the basis, free space along the main axis is
     *   distributed to views in the ratio of their flex weights. Similarly, if the
     *   views will overflow the parent, space is subtracted in these ratios. A flex
     *   of 0 means this view is not resized. Flex values must not be negative.
     */
    public static final class BoxLayoutSettings extends Struct {
        public int horizontal;
        public int inside_border_horizontal_spacing;
        public int inside_border_vertical_spacing;
        public Insets inside_border_insets;
        public int between_child_spacing;
        public MainAxisAlignment main_axis_alignment;
        public CrossAxisAlignment cross_axis_alignment;
        public int minimum_cross_axis_size;
        public int default_flex;
        public BoxLayoutSettings() {
          super(RUNTIME);
        }
        public BoxLayoutSettings(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:ButtonState).</em>
     * 
     * === Options:
     * NORMAL ::
     *   
     * HOVERED ::
     *   
     * PRESSED ::
     *   
     * DISABLED ::
     *   
     * 
     * @method _enum_ButtonState_
     * @return [Symbol]
     * @scope class
     */
    public enum ButtonState implements EnumMapper.IntegerEnum {
        NORMAL(Long.valueOf(0L).intValue()),
        HOVERED(Long.valueOf(1L).intValue()),
        PRESSED(Long.valueOf(2L).intValue()),
        DISABLED(Long.valueOf(3L).intValue())
        ;
        
        private int nativeInt;
        
        private ButtonState(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:HorizontalAlignment).</em>
     * 
     * === Options:
     * LEFT ::
     *   Align the text's left edge with that of its display area.
     * CENTER ::
     *   Align the text's center with that of its display area.
     * RIGHT ::
     *   Align the text's right edge with that of its display area.
     * 
     * @method _enum_HorizontalAlignment_
     * @return [Symbol]
     * @scope class
     */
    public enum HorizontalAlignment implements EnumMapper.IntegerEnum {
        LEFT(Long.valueOf(0L).intValue()),
        CENTER(Long.valueOf(1L).intValue()),
        RIGHT(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private HorizontalAlignment(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:MenuAnchorPosition).</em>
     * 
     * === Options:
     * TOPLEFT ::
     *   
     * TOPRIGHT ::
     *   
     * BOTTOMCENTER ::
     *   
     * 
     * @method _enum_MenuAnchorPosition_
     * @return [Symbol]
     * @scope class
     */
    public enum MenuAnchorPosition implements EnumMapper.IntegerEnum {
        TOPLEFT(Long.valueOf(0L).intValue()),
        TOPRIGHT(Long.valueOf(1L).intValue()),
        BOTTOMCENTER(Long.valueOf(2L).intValue())
        ;
        
        private int nativeInt;
        
        private MenuAnchorPosition(int nativeInt) {
            this.nativeInt = nativeInt;
        }
        
        @Override
        public int intValue() {
            return nativeInt;
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :size ::
     *   (Integer) Size of the data structure.
     * :addRef ::
     *   (FFI::Pointer(*)) Called to increment the reference count for the object. Should be called
     *   for every new copy of a pointer to a given object.
     * :release ::
     *   (FFI::Pointer(*)) Called to decrement the reference count for the object. If the reference
     *   count falls to 0 the object should self-delete. Returns true (1) if the
     *   resulting reference count is 0.
     * :hasOneRef ::
     *   (FFI::Pointer(*)) Returns true (1) if the current reference count is 1.
     */
    public static final class Base extends Struct {
        public NativeLong size;
        public Pointer add_ref;
        public Pointer release;
        public Pointer has_one_ref;
        public Base() {
          super(RUNTIME);
        }
        public Base(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * (Not documented)
     * 
     * = Fields:
     * :base ::
     *   (Base) Base structure.
     * :onContextInitialized ::
     *   (FFI::Pointer(*)) Called on the browser process UI thread immediately after the CEF context
     *   has been initialized.
     * :onBeforeChildProcessLaunch ::
     *   (FFI::Pointer(*)) Called before a child process is launched. Will be called on the browser
     *   process UI thread when launching a render process and on the browser
     *   process IO thread when launching a GPU or plugin process. Provides an
     *   opportunity to modify the child process command line. Do not keep a
     *   reference to |command_line| outside of this function.
     * :onRenderProcessThreadCreated ::
     *   (FFI::Pointer(*)) Called on the browser process IO thread after the main thread has been
     *   created for a new render process. Provides an opportunity to specify extra
     *   information that will be passed to
     *   cef_render_process_handler_t::on_render_thread_created() in the render
     *   process. Do not keep a reference to |extra_info| outside of this function.
     * :getPrintHandler ::
     *   (FFI::Pointer(*)) Return the handler for printing on Linux. If a print handler is not
     *   provided then printing will not be supported on the Linux platform.
     */
    public static final class BrowserProcessHandler extends Struct {
        public Base base;
        public Pointer on_context_initialized;
        public Pointer on_before_child_process_launch;
        public Pointer on_render_process_thread_created;
        public Pointer get_print_handler;
        public BrowserProcessHandler() {
          super(RUNTIME);
        }
        public BrowserProcessHandler(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * Implement this structure to provide handler implementations. Methods will be
     * called by the process and/or thread indicated.
     * 
     * = Fields:
     * :base ::
     *   (Base) Base structure.
     * :onBeforeCommandLineProcessing ::
     *   (FFI::Pointer(*)) Provides an opportunity to view and/or modify command-line arguments before
     *   processing by CEF and Chromium. The |process_type| value will be NULL for
     *   the browser process. Do not keep a reference to the cef_command_line_t
     *   object passed to this function. The CefSettings.command_line_args_disabled
     *   value can be used to start with an NULL command-line object. Any values
     *   specified in CefSettings that equate to command-line arguments will be set
     *   before this function is called. Be cautious when using this function to
     *   modify command-line arguments for non-browser processes as this may result
     *   in undefined behavior including crashes.
     * :onRegisterCustomSchemes ::
     *   (FFI::Pointer(*)) Provides an opportunity to register custom schemes. Do not keep a reference
     *   to the |registrar| object. This function is called on the main thread for
     *   each process and the registered schemes should be the same across all
     *   processes.
     * :getResourceBundleHandler ::
     *   (FFI::Pointer(*)) Return the handler for resource bundle events. If
     *   CefSettings.pack_loading_disabled is true (1) a handler must be returned.
     *   If no handler is returned resources will be loaded from pack files. This
     *   function is called by the browser and render processes on multiple threads.
     * :getBrowserProcessHandler ::
     *   (FFI::Pointer(*)) Return the handler for functionality specific to the browser process. This
     *   function is called on multiple threads in the browser process.
     * :getRenderProcessHandler ::
     *   (FFI::Pointer(*)) Return the handler for functionality specific to the render process. This
     *   function is called on the render process main thread.
     */
    public static final class App extends Struct {
        public Base base;
        public Pointer on_before_command_line_processing;
        public Pointer on_register_custom_schemes;
        public Pointer get_resource_bundle_handler;
        public Pointer get_browser_process_handler;
        public Pointer get_render_process_handler;
        public App() {
          super(RUNTIME);
        }
        public App(jnr.ffi.Runtime runtime) {
          super(runtime);
        }
    }
    
    /**
     * This function should be called from the application entry point function to
     * execute a secondary process. It can be used to run secondary processes from
     * the browser client executable (default behavior) or from a separate
     * executable specified by the CefSettings.browser_subprocess_path value. If
     * called for the browser process (identified by no "type" command-line value)
     * it will return immediately with a value of -1. If called for a recognized
     * secondary process it will block until the process should exit and then return
     * the process exit code. The |application| parameter may be NULL. The
     * |windows_sandbox_info| parameter is only used on Windows and may be NULL (see
     * cef_sandbox_win.h for details).
     * 
     * @method executeProcess(args, application, windowsSandboxInfo)
     * @param [MainArgs] args 
     * @param [App] application 
     * @param [FFI::Pointer(*Void)] windowsSandboxInfo 
     * @return [Integer] 
     * @scope class
     */
    public static int executeProcess(MainArgs args, App application, Pointer windowsSandboxInfo) {
        return INSTANCE.executeProcess(args, application, windowsSandboxInfo);
    }
    
    /**
     * This function should be called on the main application thread to initialize
     * the CEF browser process. The |application| parameter may be NULL. A return
     * value of true (1) indicates that it succeeded and false (0) indicates that it
     * failed. The |windows_sandbox_info| parameter is only used on Windows and may
     * be NULL (see cef_sandbox_win.h for details).
     * 
     * @method initialize(args, settings, application, windowsSandboxInfo)
     * @param [MainArgs] args 
     * @param [Settings] settings 
     * @param [App] application 
     * @param [FFI::Pointer(*Void)] windowsSandboxInfo 
     * @return [Integer] 
     * @scope class
     */
    public static int initialize(MainArgs args, Settings settings, App application, Pointer windowsSandboxInfo) {
        return INSTANCE.initialize(args, settings, application, windowsSandboxInfo);
    }
    
    /**
     * This function should be called on the main application thread to shut down
     * the CEF browser process before the application exits.
     * 
     * @method shutdown()
     * @return [nil] 
     * @scope class
     */
    public static void shutdown() {
        INSTANCE.shutdown();
    }
    
    /**
     * Perform a single iteration of CEF message loop processing. This function is
     * used to integrate the CEF message loop into an existing application message
     * loop. Care must be taken to balance performance against excessive CPU usage.
     * This function should only be called on the main application thread and only
     * if cef_initialize() is called with a CefSettings.multi_threaded_message_loop
     * value of false (0). This function will not block.
     * 
     * @method doMessageLoopWork()
     * @return [nil] 
     * @scope class
     */
    public static void doMessageLoopWork() {
        INSTANCE.doMessageLoopWork();
    }
    
    /**
     * Run the CEF message loop. Use this function instead of an application-
     * provided message loop to get the best balance between performance and CPU
     * usage. This function should only be called on the main application thread and
     * only if cef_initialize() is called with a
     * CefSettings.multi_threaded_message_loop value of false (0). This function
     * will block until a quit message is received by the system.
     * 
     * @method runMessageLoop()
     * @return [nil] 
     * @scope class
     */
    public static void runMessageLoop() {
        INSTANCE.runMessageLoop();
    }
    
    /**
     * Quit the CEF message loop that was started by calling cef_run_message_loop().
     * This function should only be called on the main application thread and only
     * if cef_run_message_loop() was used.
     * 
     * @method quitMessageLoop()
     * @return [nil] 
     * @scope class
     */
    public static void quitMessageLoop() {
        INSTANCE.quitMessageLoop();
    }
    
    /**
     * Set to true (1) before calling Windows APIs like TrackPopupMenu that enter a
     * modal message loop. Set to false (0) after exiting the modal message loop.
     * 
     * @method setOsmodalLoop(osModalLoop)
     * @param [Integer] osModalLoop 
     * @return [nil] 
     * @scope class
     */
    public static void setOsmodalLoop(int osModalLoop) {
        INSTANCE.setOsmodalLoop(osModalLoop);
    }
    
    /**
     * Call during process startup to enable High-DPI support on Windows 7 or newer.
     * Older versions of Windows should be left DPI-unaware because they do not
     * support DirectWrite and GDI fonts are kerned very badly.
     * 
     * @method enableHighdpiSupport()
     * @return [nil] 
     * @scope class
     */
    public static void enableHighdpiSupport() {
        INSTANCE.enableHighdpiSupport();
    }
    
    
    public interface CEFInterface {
        
        @Retention(RetentionPolicy.RUNTIME)
        @Target(ElementType.METHOD)
        @interface NativeName {
            String value();
        }
        
        class NativeNameAnnotationFunctionMapper implements FunctionMapper {
            @Override
            public String mapFunctionName(String functionName, Context context) {
                for (Annotation ann : context.getAnnotations()) {
                    if (ann.annotationType() == NativeName.class)
                        return ((NativeName) ann).value();
                }
                return functionName;
            }
        }
        
        
        static class InstanceCreator {
            private static CEFInterface createInstance() {
                CEFInterface lib = LibraryLoader.create(CEFInterface.class)
                  .option(LibraryOption.FunctionMapper, new NativeNameAnnotationFunctionMapper())
                  .load("cef");
                RUNTIME = jnr.ffi.Runtime.getRuntime(lib);
                return lib;
            }
        }
        
        @NativeName("cef_get_xdisplay")
        XDisplay getXdisplay();
        
        @NativeName("cef_execute_process")
        int executeProcess(MainArgs args, App application, Pointer windowsSandboxInfo);
        
        @NativeName("cef_initialize")
        int initialize(MainArgs args, Settings settings, App application, Pointer windowsSandboxInfo);
        
        @NativeName("cef_shutdown")
        void shutdown();
        
        @NativeName("cef_do_message_loop_work")
        void doMessageLoopWork();
        
        @NativeName("cef_run_message_loop")
        void runMessageLoop();
        
        @NativeName("cef_quit_message_loop")
        void quitMessageLoop();
        
        @NativeName("cef_set_osmodal_loop")
        void setOsmodalLoop(int osModalLoop);
        
        @NativeName("cef_enable_highdpi_support")
        void enableHighdpiSupport();
        
    }
}
